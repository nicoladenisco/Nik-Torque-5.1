## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: getBeanDeep.vm 1331196 2012-04-27 02:56:12Z tfischer $
##
## This template creates source code for a base bean. 
## The template expects as input a "table" element from the torque schema
## which was processed by the OMTransformer.  
##
// getBeanDeep
#set ( $columnElements = $torqueGen.getChildren("column") )
#set ( $referencingForeignKeyElements = $torqueGen.getChild("referencing-foreign-keys").getChildren("foreign-key") )
#set ( $foreignKeyElements = $torqueGen.getChildren("foreign-key") )
#set ( $primaryKeyColumnElements = $torqueGen.getChild("primary-keys").getChildren("column"))

    /**
     * Creates a $beanClassName with the contents of this object
     * @param fetcher an istance of table fetcher
     * @param conn db connection for deep populate
     * @return a $beanClassName with the contents of this object
     * @throws TorqueException errors populating objects
     */
    public $beanClassName getBeanDeep(TorqueTableFetcher fetcher, Connection conn)
       throws Exception
    {
      return getBeanDeep(fetcher.getIgnoreTables(), fetcher, conn);
    }

    /**
     * Creates a $beanClassName with the contents of this object
     * @param ignoreTableName table to ignore in deep populate
     * @param fetcher an istance of table fetcher
     * @param conn db connection for deep populate
     * @return a $beanClassName with the contents of this object
     * @throws TorqueException errors populating objects
     */
    public $beanClassName getBeanDeep(Stack<String> ignoreTableName, TorqueTableFetcher fetcher, Connection conn)
       throws Exception
    {
        int deepStrategy = fetcher.getDeepStrategy(${peerClassName}.TABLE_NAME);
        ${beanClassName} result = ($beanClassName) fetcher.getCreatedBeen(this);

        if(result != null)
        {
            // verify if the bean is completed and provide completation
            if(!fetcher.isBeanCompleted(result))
            {
              if(deepStrategy == TorqueTableFetcher.DEEP_GRANT)
                populateBeanMulti(result, ignoreTableName, fetcher, conn);
            }

            // we have already created a bean for this object, return it
            return result;
        }

        // no bean exists for this object; create a new one
        result = new ${beanClassName}();
        fetcher.putCreatedBean(this, result);
        updateBean(result);           
        
        
  #foreach ($columnElement in $primaryKeyColumnElements)
    #set ( $columnField = $columnElement.getAttribute("field") )
    #set ( $columnFieldType = $columnElement.getAttribute("fieldType") )
    #set ( $setter = $columnElement.getAttribute("setter") )
    #set ( $getter = $columnElement.getAttribute("getter") )
    #set ( $number = $columnElement.getAttribute("number") )
    #set ( $primitive = $columnElement.getAttribute("primitive") )
    
        #if ($number == "true")
          // test for null object (pk == 0) type=${columnFieldType} 
          if(${getter}() == 0)
            deepStrategy = TorqueTableFetcher.DEEP_DENY;
        #else
          // test for null object (pk == null) type=${columnFieldType} 
          if(${getter}() == null)
            deepStrategy = TorqueTableFetcher.DEEP_DENY;
        #end
        
  #end        
        
        switch(deepStrategy)
        {
          case TorqueTableFetcher.DEEP_DENY:
            break;

          default:
          case TorqueTableFetcher.DEEP_GRANT_NO_RECURSE:
            if(!ignoreTableName.contains(${peerClassName}.TABLE_NAME))
            {
              ignoreTableName.push(${peerClassName}.TABLE_NAME);
              populateBeanMulti(result, ignoreTableName, fetcher, conn);
              ignoreTableName.pop();
            }
            populateBeanOne(result, ignoreTableName, fetcher, conn);
            break;

          case TorqueTableFetcher.DEEP_GRANT:
            if(!ignoreTableName.contains(${peerClassName}.TABLE_NAME))
            {
              populateBeanMulti(result, ignoreTableName, fetcher, conn);
            }
            populateBeanOne(result, ignoreTableName, fetcher, conn);
            break;

          case TorqueTableFetcher.DEEP_GRANT_NO_DEEP:
            populateBeanOne(result, ignoreTableName, fetcher, conn);
            break;
        }
        
        fetcher.setBeanCompleted(result, true);
        return result;
    }
    
#if ($torqueGen.booleanOption("torque.om.complexObjectModel"))
    
    /**
     * Populate multi to one relations (one is ${javaName}).
     * we have one istance (aForeignTableName)
     */
    private void populateBeanOne($beanClassName result, Stack<String> ignoreTableName, TorqueTableFetcher fetcher, Connection conn)
       throws Exception
    {
      if(isNew())
        return;
        
  ## foreign keys in this object
  #foreach ($foreignKeyElement in $foreignKeyElements)
    #set ( $foreignTableElement = $foreignKeyElement.getChild("table") )
    #set ( $foreignClassName = $foreignTableElement.getAttribute("javaName") )
    #set ( $foreignClassNamePeer = $foreignTableElement.getAttribute("peerClassName") )
    #set ( $foreignBeanClassName = $foreignTableElement.getAttribute("beanClassName") )
    #set ( $localFieldElement = $foreignKeyElement.getChild("local-field") )
    #set ( $localFieldType = $localFieldElement.getAttribute("fieldType") )
    #set ( $setter = $localFieldElement.getAttribute("setter") )
    #set ( $beanFieldElement = $foreignKeyElement.getChild("local-field-in-bean") )
    #set ( $beanGetter = $beanFieldElement.getAttribute("getter") )
    #if ($beanGetter)
    
      #set ( $relatedClassName = $foreignClassName )
      #set ( $relatedBeanClassName = $foreignBeanClassName )
      #set ( $localColumns = $foreignKeyElement.getChild("reference").getChildren("local-column") )
      #set ( $numCol = $localColumns.size() )

      #set ( $relCol = "" )
      #if  ( $beanGetter.indexOf("RelatedBy") != -1)
      #set ( $relCol = $beanGetter.substring($beanGetter.indexOf("RelatedBy")) )
      #end
      
      #set ( $locCol = "${javaName}${relCol}" )
      #set ( $beanMethodSuffix = "${relatedBeanClassName}${relCol}" )
      #set ( $objectMethodSuffix = "${relatedClassName}${relCol}" )
      #set ( $varName = "a$relatedClassName$relCol" )
      
      #set( $ac1 = $torqueGen.createAccumulator() )
      #set( $ac2 = $torqueGen.createAccumulator() )
      #set( $ac3 = $torqueGen.createAccumulator() )
      
      #foreach ($lc in $localColumns)
        #set ( $columnName = $lc.getAttribute("peerColumnName") )
        #set ( $column = $lc.getChild("column") )
        #set ( $number = $column.getAttribute("number") )        
        #set ( $clo = $column.getAttribute("field") )
        #set ( $getter = $column.getAttribute("getter") )
        #set ( $setter = $column.getAttribute("setter") )
        #if ($number == true)
          #set ( $dummy = $ac1.add("this.${clo} != 0") )
          #set ( $dummy = $ac2.add("this.${clo} != copyObj.${getter}()") )
          #set ( $dummy = $ac3.add("SimpleKey.keyFor(this.${clo})") )
        #else
          #set ( $dummy = $ac1.add("!ObjectUtils.equals(this.${clo}, null)") )
          #set ( $dummy = $ac2.add("!ObjectUtils.equals(this.${clo}, copyObj.${getter}())") )
          #set ( $dummy = $ac3.add("SimpleKey.keyFor(this.${clo})") )
        #end
      #end      
            
      #set ( $conditional = $ac1.join(" && ") )
      #set ( $conditional1 = $ac2.join(" && ") )
      #set ( $getparam = $ac3.join(",") )
      
      if( $conditional )
      {
        #if ($numCol > 1)
        SimpleKey[] sks = new SimpleKey[] {$getparam};    
        ${relatedBeanClassName} relatedBean = (${relatedBeanClassName}) fetcher
            .getCreatedBeen(${relatedClassName}Peer.TABLE_NAME, new ComboKey(sks));
        #else
        ${relatedBeanClassName} relatedBean = (${relatedBeanClassName}) fetcher
            .getCreatedBeen(${relatedClassName}Peer.TABLE_NAME, ${getparam});
        #end

        if (relatedBean == null && get${objectMethodSuffix}JoinAll(conn) != null)
        {
            relatedBean = ${varName}.getBeanDeep(ignoreTableName, fetcher, conn);
        }

        if( relatedBean != null)
        {
            result.set${beanMethodSuffix}(relatedBean);

            #if($relatedClassName == $javaName)
            relatedBean.set${javaName}Bean${relCol}(result);
            #else
            if(!relatedBean.get${javaName}Bean${relCol}s().stream().anyMatch((b) -> b == result))
              relatedBean.add${javaName}Bean${relCol}s(result);
            #end
        }
      }

    #end
  #end        
    }    
    
    /**
     * Populate one to multi relations (multi is ${tblname}).
     * we have a list of istance (List<ForeignTableName>).
     */
    private void populateBeanMulti($beanClassName result, Stack<String> ignoreTableName, TorqueTableFetcher fetcher, Connection conn)
       throws Exception
    {  
  ## foreign references to this Object
  #if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
    #foreach ($foreignKeyElement in $referencingForeignKeyElements)
      #set ( $foreignTableElement = $foreignKeyElement.getParent() )
      #set ( $foreignTableName = $foreignTableElement.getAttribute("name") )
      #if ($foreignTableName != $name)
        #set ( $foreignFieldElement = $foreignKeyElement.getChild("foreign-field") )
        ## if the referencing table is in an external schema, 
        ## fieldElement is null. In this case,skip the following code.
        #if ($foreignFieldElement)
          #set ( $foreignClassName = $foreignTableElement.getAttribute("javaName") )
          #set ( $foreignBeanClassName = $foreignTableElement.getAttribute("beanClassName") )
          #set ( $beanFieldElement = $foreignKeyElement.getChild("foreign-field-in-bean") )
          #set ( $beanGetter = $beanFieldElement.getAttribute("getter") )
          #set ( $beanSetter = $beanFieldElement.getAttribute("setter") )
          #set ( $adder = $foreignFieldElement.getAttribute("adder") )
          
          #set ( $relatedClassName = $foreignClassName )
          #set ( $relatedBeanClassName = $foreignBeanClassName )
          
          #set ( $relatedByCol = "" )
          #if  ( $beanGetter.indexOf("RelatedBy") != -1)
          #set ( $relatedByCol = $beanGetter.substring($beanGetter.indexOf("RelatedBy"), $beanGetter.length() - 1) )
          #end
          
          #if ($relatedByCol == "")
            #set ( $locCol = "${javaName}" )
            #set ( $relCol = "${relatedClassName}s" )
            #set ( $relCol2 = "${relatedClassName}" )
            #set ( $beanRelCol = "${foreignBeanClassName}s" )
          #else
            #set ( $locCol = "${javaName}${relatedByCol}" )
            #set ( $relCol= "${relatedClassName}s${relatedByCol}" )
            #set ( $relCol2= "${relatedClassName}${relatedByCol}" )
            #set ( $beanRelCol = "${relatedBeanClassName}${relatedByCol}s" )
          #end

          #set ( $collName = "coll$relCol" )
          
        if (!ignoreTableName.contains(${relatedClassName}Peer.TABLE_NAME))
        {
          if(fetcher.getDeepStrategy(${javaName}Peer.TABLE_NAME, ${relatedClassName}Peer.TABLE_NAME) == TorqueTableFetcher.DEEP_GRANT)
          {
            if ($collName == null && !isNew())
            {
              Criteria c = new Criteria();
              #foreach ($lc in $foreignKeyElement.getElements("reference/local-column/column") )
                #set( $fc = $lc.getElement("referenced-column/column") )
                c.and(${relatedClassName}Peer.${lc.getAttribute("peerColumnName")}, ${fc.getAttribute("getter")}());
              #end              

              fetcher.fetchTable(${javaName}Peer.TABLE_NAME,
                 ${relatedClassName}Peer.TABLE_NAME, c, ignoreTableName, conn,
                 ${relatedClassName}Peer::doSelectJoinAllForBeans,
                 (b) -> add${relCol2}FromBean(($relatedClassName) b));
            }

            if (${collName} != null && ${collName}.size() != result.get${beanRelCol}().size())
            {
                for ($relatedClassName related : $collName)
                {
                    related.set${locCol}((${javaName}) this);
                    ${relatedBeanClassName} relatedBean = related.getBeanDeep(ignoreTableName, fetcher, conn);

                    if(!result.get${beanRelCol}().stream().anyMatch((b) -> b == relatedBean))
                      result.add${beanRelCol}(relatedBean);
                }
            }
          }
        }
          
        #end
      #end
    #end
  #end    
    }
        
#end

    /**
     * Copy fields to the bean.
     * @return a $beanClassName with the field updated
     */
    public $beanClassName updateBeanDeep($beanClassName copyObj, TorqueTableFetcher fetcher, Connection conn)
      throws Exception
    {
  #if ($torqueGen.booleanOption("torque.om.complexObjectModel"))
      int deepStrategy = fetcher.getDeepStrategy(${javaName}Peer.TABLE_NAME);

      if(deepStrategy == TorqueTableFetcher.DEEP_DENY)
        return updateBean(copyObj);

      // NOTE: copy all fields BUT NOT the foreign keys (different from updateBean())
      #foreach ($col in $table.Columns)
        #if (!$col.isForeignKey())
        copyObj.${col.SetterName}($col.UncapitalisedJavaName);
        #end
      #end

      Stack<String> ignoreTableName = fetcher.getIgnoreTables();
      updateBeanOne(copyObj, ignoreTableName, fetcher, conn);

      copyObj.setModified(isModified());
      copyObj.setNew(isNew());
      return copyObj;
  #else
      updateBean(copyObj);
  #end
    }

#if ($torqueGen.booleanOption("torque.om.complexObjectModel"))
    /**
     * Update one to multi relations (multi is ${javaName}).
     */
    private void updateBeanOne($beanClassName copyObj, Stack<String> ignoreTableName, TorqueTableFetcher fetcher, Connection conn)
       throws Exception
    {    
    #foreach ($foreignKeyElement in $foreignKeyElements)
      #set ( $foreignTableElement = $foreignKeyElement.getChild("table") )
      #set ( $foreignTableName = $foreignTableElement.getAttribute("name") )
      #set ( $foreignClassName = $foreignTableElement.getAttribute("javaName") )      
      #set ( $foreignClassNamePeer = $foreignTableElement.getAttribute("peerClassName") )
      #set ( $foreignBeanClassName = $foreignTableElement.getAttribute("beanClassName") )
      #set ( $localFieldElement = $foreignKeyElement.getChild("local-field") )
      #set ( $localFieldType = $localFieldElement.getAttribute("fieldType") )
      #set ( $setter = $localFieldElement.getAttribute("setter") )
      #set ( $beanFieldElement = $foreignKeyElement.getChild("local-field-in-bean") )
      #set ( $beanGetter = $beanFieldElement.getAttribute("getter") )
      #set ( $localColumns = $foreignKeyElement.getChild("reference").getChildren("local-column") )
      #set ( $numCol = $localColumns.size() )
      ## #if ($foreignTableName != $name)
        
      #set ( $tblFK = $foreignTableElement )
      #set ( $relatedClassName = $foreignClassName )
      #set ( $relatedBeanClassName = "${relatedClassName}Bean" )

      #set ( $relCol = "" )
      #if  ( $beanGetter.indexOf("RelatedBy") != -1)
      #set ( $relCol = $beanGetter.substring($beanGetter.indexOf("RelatedBy")) )
      #end
      
      #set ( $locCol = "${javaName}${relCol}" )
      #set ( $beanMethodSuffix = "${relatedBeanClassName}${relCol}" )
      #set ( $objectMethodSuffix = "${relatedClassName}${relCol}" )
      #set ( $varName = "a$relatedClassName$relCol" )

      #set( $ac1 = $torqueGen.createAccumulator() )
      #set( $ac2 = $torqueGen.createAccumulator() )
      #set( $ac3 = $torqueGen.createAccumulator() )
      
      #foreach ($lc in $localColumns)
        #set ( $columnName = $lc.getAttribute("peerColumnName") )
        #set ( $column = $lc.getChild("column") )
        #set ( $number = $column.getAttribute("number") )        
        #set ( $clo = $column.getAttribute("field") )
        #set ( $getter = $column.getAttribute("getter") )
        #set ( $setter = $column.getAttribute("setter") )
        #if ($number == true)
          #set ( $dummy = $ac1.add("this.${clo} != 0") )
          #set ( $dummy = $ac2.add("this.${clo} != copyObj.${getter}()") )
          #set ( $dummy = $ac3.add("SimpleKey.keyFor(this.${clo})") )
        #else
          #set ( $dummy = $ac1.add("!ObjectUtils.equals(this.${clo}, null)") )
          #set ( $dummy = $ac2.add("!ObjectUtils.equals(this.${clo}, copyObj.${getter}())") )
          #set ( $dummy = $ac3.add("SimpleKey.keyFor(this.${clo})") )
        #end
      #end      
            
      #set ( $conditional = $ac1.join(" && ") )
      #set ( $conditional1 = $ac2.join(" && ") )
      #set ( $getparam = $ac3.join(",") )
      
      if( $conditional1 )
      {
        #foreach ($lc in $localColumns)
          #set ( $column = $lc.getChild("column") )
          #set ( $getter = $column.getAttribute("getter") )
          #set ( $setter = $column.getAttribute("setter") )
          copyObj.${setter}(this.${getter}());
        #end        
        copyObj.set${beanMethodSuffix}(null);

        if( $conditional )
        {
          #if ($numCol > 1)
          SimpleKey[] sks = new SimpleKey[] {$getparam};    
          ${relatedBeanClassName} relatedBean = (${relatedBeanClassName}) fetcher
              .getCreatedBeen(${relatedClassName}Peer.TABLE_NAME, new ComboKey(sks));
          #else
          ${relatedBeanClassName} relatedBean = (${relatedBeanClassName}) fetcher
              .getCreatedBeen(${relatedClassName}Peer.TABLE_NAME, ${getparam});
          #end          

          if (relatedBean == null && get${objectMethodSuffix}(conn) != null)
          {
              relatedBean = ${varName}.getBeanDeep(ignoreTableName, fetcher, conn);
          }

          if( relatedBean != null)
          {
              copyObj.set${beanMethodSuffix}(relatedBean);

              #if($relatedClassName == $javaName)
              relatedBean.set${javaName}Bean${relCol}(copyObj);
              #else
              if(!relatedBean.get${javaName}Bean${relCol}s().stream().anyMatch((b) -> b == copyObj))
                relatedBean.add${javaName}Bean${relCol}s(copyObj);
              #end
          }
        }
      }

    #end
    }
#end
  