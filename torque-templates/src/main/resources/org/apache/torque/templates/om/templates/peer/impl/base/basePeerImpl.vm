## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: basePeerImpl.vm 1855051 2019-03-08 15:16:28Z tv $
##
## Creates the base peer class.
## 
## This template expects the current source element to be a "table" element 
## from the torque schema.
## The schema needs to be processed by the OMTransformer.
## The options and the attributes of the current source element must be set
## as velocity variables.  
##
package ${basePeerPackage};

$torqueGen.mergepoint("imports")
import org.apache.torque.sql.SqlBuilder;

$torqueGen.mergepoint("classJavadoc")
@SuppressWarnings("unused")
public abstract class $basePeerImplClassName
#if (${basePeerImplBaseClass} && ${basePeerImplBaseClass} !="")
    extends ${basePeerImplBaseClass}<${dbObjectClassName}>
#end
{
$torqueGen.mergepoint("serialVersionUid")

  /** listener per operazioni update, insert, delete */
  private ModifyMonitorListener modifyListener = null;

  public void setModifyListener(ModifyMonitorListener modifyListener)
  {
    this.modifyListener = modifyListener;
  }

  public ModifyMonitorListener getModifyListener()
  {
    return this.modifyListener;
  }
  
$torqueGen.mergepoint("constructor")
$torqueGen.mergepoint("getDbObjectInstance")
$torqueGen.mergepoint("doUpdate")
#if ($torqueGen.booleanOption("torque.om.addSaveMethods") && $saveMethodsInDbObjects != "true")
$torqueGen.mergepoint("saveMethods")
#end
$torqueGen.mergepoint("doDelete")
$torqueGen.mergepoint("buildCriteria")
$torqueGen.mergepoint("buildSelectCriteria")
$torqueGen.mergepoint("buildColumnValues")
$torqueGen.mergepoint("retrieveByPK")
$torqueGen.mergepoint("retrieveByPKs")
$torqueGen.mergepoint("peerUnices")
#if ($torqueGen.booleanOption("torque.om.complexObjectModel"))
  #if ($torqueGen.booleanOption("torque.om.objectIsCaching") && $torqueGen.booleanOption("torque.om.complexObjectModel.generateDoSelectJoin"))
$torqueGen.mergepoint("doSelectJoin")
$torqueGen.mergepoint("doSelectJoinAllExcept")
$torqueGen.mergepoint("doSelectJoinAll")
  #end
  #if ($torqueGen.booleanOption("torque.om.objectIsCaching") && $torqueGen.booleanOption("torque.om.complexObjectModel.generateFillers"))
$torqueGen.mergepoint("fillReferencedObjects")
$torqueGen.mergepoint("fillReferencingObjects")
  #end
$torqueGen.mergepoint("setAndSaveReferencing")
#end

  @Override
  public int doDelete(
     final Criteria criteria,
     final Connection connection)
     throws TorqueException
  {
    int rv = super.doDelete(criteria, connection);

    if(modifyListener != null)
    {
      String fullTableName = SqlBuilder.getFullTableName(
         getTableMap().getFullyQualifiedTableName(),
         criteria.getDbName());

      modifyListener.doDelete(criteria.getDbName(), fullTableName, criteria, null, null, connection);
    }

    return rv;
  }

  @Override
  public ObjectKey<?> doInsert(
     final ColumnValues insertValues,
     final Connection connection)
     throws TorqueException
  {
    ObjectKey<?> id = super.doInsert(insertValues, connection);

    if(modifyListener != null)
    {
      String databaseNameFromInsertValues = insertValues.getDbName();
      if(databaseNameFromInsertValues == null)
        databaseNameFromInsertValues = getDatabaseName();

      String fullTableName = SqlBuilder.getFullTableName(
         getTableMap().getFullyQualifiedTableName(),
         databaseNameFromInsertValues);

      modifyListener.doInsert(databaseNameFromInsertValues, fullTableName, id, insertValues, connection);
    }

    return id;
  }

  @Override
  public int doUpdate(
     final Criteria criteria,
     final ColumnValues updateValues,
     final Connection connection)
     throws TorqueException
  {
    int rv = super.doUpdate(criteria, updateValues, connection);

    if(modifyListener != null)
    {
      String fullTableName = SqlBuilder.getFullTableName(
         getTableMap().getFullyQualifiedTableName(),
         criteria.getDbName());

      modifyListener.doUpdate(criteria.getDbName(), fullTableName, criteria, updateValues,
         null, null, connection);
    }

    return rv;
  }


$torqueGen.mergepoint("extensions")
}
