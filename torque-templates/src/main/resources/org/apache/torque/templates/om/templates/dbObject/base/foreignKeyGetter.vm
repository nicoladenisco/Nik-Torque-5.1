## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: foreignKeyGetter.vm 1849387 2018-12-20 13:42:45Z tv $
##
## This template creates primary key methods.  
## The template expects as input a "table" element from the torque schema, 
## which was processed by the OMTransformer.  
##
#set ( $referenceElements = $torqueGen.getChildren("reference"))
#set ( $foreignTableElement = $torqueGen.getChild("table"))
#set ( $foreignDbObjectClassName = $foreignTableElement.getAttribute("dbObjectClassName"))
    /**
     * Returns an id that differentiates the referenced ${foreignDbObjectClassName} object
     * from all other ${foreignDbObjectClassName} objects.
     *
     * @return an ObjectKey.
     */
    public ObjectKey<?> ${foreignKeyGetter}()
    {
#if ($referenceElements.size() == 1)
  #set ( $columnElement = $referenceElements.get(0).getChild("local-column").getChild("column") )
  #set ( $columnType = $columnElement.getAttribute("fieldType") )
  #set ( $columnIsPrimitive = $columnElement.getAttribute("primitive") )
  #set ( $getter = $columnElement.getAttribute("getter") )
  #if ($columnIsPrimitive == "true")
        ${columnType} foreignKey = ${getter}();
        if (foreignKey == 0)
        {
            return SimpleKey.keyFor((Number) null);
        }
        return SimpleKey.keyFor(foreignKey);
  #else
        return SimpleKey.keyFor(${getter}());
  #end
#elseif ($referenceElements.size() > 1)
        SimpleKey<?>[] pks = new SimpleKey[$referenceElements.size()];
  #set ($i = 0)
  #foreach ($referenceElement in $referenceElements)
    #set ($columnElement = $referenceElement.getChild("local-column").getChild("column"))
    #set ( $getter = $columnElement.getAttribute("getter") )
        pks[$i] = SimpleKey.keyFor(${getter}());
    #set ($i = $i + 1)
  #end
        return new ComboKey(pks);
#else
        return null;
#end
    }
