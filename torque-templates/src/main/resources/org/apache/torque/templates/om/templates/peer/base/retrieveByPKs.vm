## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: retrieveByPKs.vm 1849386 2018-12-20 13:28:59Z tv $
##
## Creates the retrieveByPks methods for the base peer.
## 
## This template expects the current source element to be a "table" element 
## from the torque schema.
## The schema needs to be processed by the OMTransformer.
## The options and the attributes of the current source element must be set
## as velocity variables.  
##
#set ( $primaryKeyColumnElements = $torqueGen.getChild("primary-keys").getChildren("column"))
#if (!$primaryKeyColumnElements.isEmpty())
  #if ($primaryKeyColumnElements.size() == 1)
    #set ( $columnElement = $primaryKeyColumnElements.get(0) )
    #set ( $columnFieldType = $columnElement.getAttribute("fieldObjectType"))
    #set ( $columnFieldTypeJava = $columnElement.getAttribute("fieldType"))
    
    #if($columnFieldTypeJava == "int")
      /**
       * Retrieve array keys.
       *
       * @param pks List of primary keys
       * @param con the connection to use
       *
       * @return the list of matching objects, not null.
       *
       * @throws TorqueException Any exceptions caught during processing will be
       *         rethrown wrapped into a TorqueException.
       */
      public static List<${dbObjectClassName}> retrieveByPKs(${columnFieldTypeJava}[] pks, Connection con)
          throws TorqueException
      {
          List<Integer> keys = new AbstractList<Integer>()
          {
            @Override
            public Integer get(int i)
            {
              return pks[i];
            }

            @Override
            public int size()
            {
              return pks.length;
            }
          };
          
          return ${peerImplGetter}().retrieveByTypedPKs(keys, con);
      }    
    #end
    
    /**
     * Retrieve multiple objects by pk.
     *
     * @param pks List of primary keys
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @deprecated use equivalent with specific connection
     */
    public static List<${dbObjectClassName}> retrieveByTypedPKs(Collection<${columnFieldType}> pks)
        throws TorqueException
    {
        return ${peerImplGetter}().retrieveByTypedPKs(pks);
    }

    /**
     * Retrieve multiple objects by pk.
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List<${dbObjectClassName}> retrieveByTypedPKs(
                Collection<${columnFieldType}> pks,
                Connection dbcon)
            throws TorqueException
    {
        return ${peerImplGetter}().retrieveByTypedPKs(pks, dbcon);
    }

  #end
    /**
     * Retrieve a multiple objects by pk.
     *
     * @param pks List of primary keys
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @deprecated use equivalent with specific connection
     */
    public static List<${dbObjectClassName}> retrieveByObjectKeys(Collection<ObjectKey<?>> pks)
        throws TorqueException
    {
        return ${peerImplGetter}().retrieveByObjectKeys(pks);
    }

    /**
     * Retrieve multiple objects by pk.
     *
     * @param pks List of primary keys
     * @param con the connection to use
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List<${dbObjectClassName}> retrieveByObjectKeys(Collection<ObjectKey<?>> pks, Connection con)
        throws TorqueException
    {
        return ${peerImplGetter}().retrieveByObjectKeys(pks, con);
    }

    /**
     * Retrieve a multiple objects by pk.
     *
     * @param pks List of primary keys
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     *
     * @deprecated This method has been renamed to retrieveByObjectKeys.
     *             This method will not be generated any more in future versions of Torque.
     */
    public static List<${dbObjectClassName}> retrieveByPKs(Collection<ObjectKey<?>> pks)
        throws TorqueException
    {
        return ${peerImplGetter}().retrieveByObjectKeys(pks);
    }

    /**
     * Retrieve multiple objects by pk.
     *
     * @param pks List of primary keys
     * @param con the connection to use
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     *
     * @deprecated This method has been renamed to retrieveByObjectKeys.
     *             This method will not be generated any more in future versions of Torque.
     */
    public static List<${dbObjectClassName}> retrieveByPKs(Collection<ObjectKey<?>> pks, Connection con)
        throws TorqueException
    {
        return ${peerImplGetter}().retrieveByObjectKeys(pks, con);
    }
           
#end

    /** Query db and return only the first record if have, otherwise null. Connection my be null. */
    public static $dbObjectClassName getFirst(Criteria c, Connection con)
        throws TorqueException
    {
       return ${peerImplGetter}().getFirst(c, con);
    }
