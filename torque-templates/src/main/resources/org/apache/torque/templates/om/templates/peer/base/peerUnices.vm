## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: peerUnices.vm 1855051 2019-03-08 15:16:28Z tv $
##
## Creates the base peer class.
## 
## This template expects the current source element to be a "table" element 
## from the torque schema.
## The schema needs to be processed by the OMTransformer.
## The options and the attributes of the current source element must be set
## as velocity variables.  
##
##
## creazione retrieve per chiavi alternate (indici univoci)
##

#set ( $count = 0 )
#set ( $uniqueKeyElements = $torqueGen.getChildren("unique"))
#foreach ($unique in $uniqueKeyElements)

#set ($count = $count + 1)
#set ($pks = $unique.getChildren("unique-column"))
#set ($uniqueName = $unique.getAttribute("name"))
#set ($uniqueFuncParams = $unique.getAttribute("func-params"))
#set ($uniqueFuncPasstr = $unique.getAttribute("func-passtr"))

// Creazione metodi per $dbObjectClassName / $uniqueName

#if ($pks.size() > 0)

    #set ($retrieveMethod = "retrieveByAlternateKey${count}")

    /**
     * Retrieve a multiple objects by alternate keys
     * Using unique index $uniqueName
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @deprecated use version with explicit connection
     */
    @Deprecated
    public static List<${dbObjectClassName}> ${retrieveMethod}s(Collection<ObjectKey<?>> pks)
        throws TorqueException
    {
        Connection db = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           return ${retrieveMethod}s(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
    }

    /**
     * Retrieve a multiple objects by alternate keys
     * Using unique index $uniqueName
     *
     * @param pks List of keys for each column in the index
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List<${dbObjectClassName}> ${retrieveMethod}s( Collection<ObjectKey<?>> pks, Connection dbcon )
        throws TorqueException
    {
        return ${peerImplGetter}().${retrieveMethod}s(pks, dbcon);
    }

    /**
     * Retrieve an object by alternate keys
     * Using unique index $uniqueName
     *
     * @deprecated use version with explicit connection
     */
    @Deprecated
    public static ${dbObjectClassName} ${retrieveMethod}($uniqueFuncParams)
        throws TorqueException
    {
        Connection db = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           return ${retrieveMethod}($uniqueFuncPasstr, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
    }

    /**
     * Retrieve an object by alternate keys
     * Using unique index $uniqueName
     *
     * @param con Connection
     */
    public static ${dbObjectClassName} ${retrieveMethod}($uniqueFuncParams,Connection con)
        throws TorqueException
    {
      return ${peerImplGetter}().${retrieveMethod}($uniqueFuncPasstr, con);
    }

    /**
     * Retrieve an object by alternate keys
     * don't throw exceptions: if not found return null.
     * Using unique index $uniqueName
     *
     * @deprecated use version with explicit connection
     */
    @Deprecated
    public static ${dbObjectClassName} ${retrieveMethod}Quiet($uniqueFuncParams)
    {
      return ${peerImplGetter}().${retrieveMethod}Quiet($uniqueFuncPasstr);
    }


    /**
     * Retrieve an object by alternate keys
     * don't throw exceptions: if not found return null.
     * Using unique index $uniqueName
     *
     * @param con the SQL connection
     */
    public static ${dbObjectClassName} ${retrieveMethod}Quiet($uniqueFuncParams, Connection con)
    {
      return ${peerImplGetter}().${retrieveMethod}Quiet($uniqueFuncPasstr, con);
    }

#end ## -- if ($pks.size() > 0) --
#end  ## -- #foreach ($unique in $table.Unices) --
