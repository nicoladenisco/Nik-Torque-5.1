# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# If true, Torque puts time stamps in generated om files.
# This also triggers the generation of "serialVersionUID"-constants
# in the classes that implement Serializable (object, peer and manager).
# The version is equal to the generation timestamp.
torque.om.addTimeStamp = true

# If true, the data objects will implement Intake's Retrievable interface
torque.om.addIntakeRetrievable = false
# Defines the Retrievable interface.
# (set to org.apache.fulcrum.intake.Retrievable if you are using Fulcrum)
torque.om.retrievableInterface = org.apache.turbine.om.Retrievable

# If true, Torque generates isX getter methods for boolean columns
# instead of getX methods.
torque.om.useIsForBooleanGetters = true;

# If true, Torque retains the schema names in automatically created java Names:
# E.g. the table name bookstore.Book will result in the java name BookstoreBook.
# If false, the schema name will be removed:
# E.g. the table name bookstore.Book will result in the java name Book.
torque.om.retainSchemaNamesInJavaName = true

# If true, Torque generates data objects with getters and setters
# for referenced and referencing objects connected by foreign key relations.
torque.om.complexObjectModel = true
# If true, Torque generates data objects that cache their foreign key
# relationships.
# This option has no effect if torque.om.complexObjectModel is set to false.
torque.om.objectIsCaching = true

# If true, Torque silently fetches data objects related by foreign key relations
# if the objects are accessed by invoking a getter on a related data object
# and the field read from the getter is not yet initialized.
# If false, Torque simply returns null if the related objects have not
# yet been read.
# This option has no effect if torque.om.objectIsCaching is set to false.
torque.om.silentDbFetch = true

# If true, Torque adds methods to get database fields by name/position.
torque.om.addGetByNameMethods = true

# The Criteria and Criterion classes to use.
# Set to org.apache.torque.criteria.Criteria
# and org.apache.torque.criteria.Criterion for the new Criteria object
# with the changed semantics.
# Set to org.apache.torque.util.Criteria
# and org.apache.torque.util.Criteria.Criterion for the old Criteria object
# with the original semantics.
torque.om.criteriaClass = org.apache.torque.criteria.Criteria
torque.om.criterionClass = org.apache.torque.criteria.Criterion

# If true, Torque generates a bean object for each data object,
# plus methods to convert data objects to beans and vice versa.
torque.om.generateBeans = false
# A fully qualified class name (e.g. org.apache.struts.action.ActionForm)
# that the generated base bean classes will extend.
torque.om.bean.beanExtendsClass =

# Whether Manager classes should be generated which cache data objects
# using JCS.
torque.om.useManagers = false

# Whether to generate methods which select at most a single record
torque.om.addSelectSingleRecordMethods = true

# Whether a save method is generated in the data object classes.
torque.om.addSaveMethods = true
# Whether the save methods should be created in the
# data objects or in the peers
torque.om.saveMethodsInDbObjects = true
# The exception which is declared to be thrown by the save methods.
# This needs to be either a list containing TorqueException
# or a super class of TorqueException
torque.om.saveException = TorqueException
# Whether the data object should track whether it has been modified
# after it has been loaded from the database or saved to the database
torque.om.trackModified = true
# Whether new data objects (i.e. constructed but not yet persisted) should be
# tracked. The information is needed by torque to decide whether an insert
# or an update command is used when saving, thus, trackNew needs to be set
# to true if addSaveMethods is true
torque.om.trackNew = true
# Whether it should be tracked if objects were deleted from the database.
torque.om.trackDeleted = true
# Whether it should be tracked if objects are currently saved.
# This needs to be set to true if torque.om.complexObjectModel is true
# and torque.om.objectIsCaching is true to prevent recursive save calls
torque.om.trackSaving = true
# Whether it should be tracked if objects are currently loaded
# from the database.
torque.om.trackLoading = true

# If true, a MapInit Class is generated for each database which can be used
# to create a complete database map at startup
torque.om.generateMapInit = false
torque.om.mapInit.databaseMapInitClassNamePrefix =
torque.om.mapInit.databaseMapInitClassNameSuffix = DatabaseMapInit
torque.om.mapInit.baseDatabaseMapInitClassNamePrefix = Base
torque.om.mapInit.databaseMapInitPackage = org.apache.torque.linkage

# Settings for foreign key methods
# Prefix and Suffix for the getter of the foreign key
torque.om.foreignKeyGetterPrefix = getForeignKeyFor
torque.om.foreignKeyGetterSuffix =

# Settings for the fields and methods representing objects
# which are referenced by foreign keys.
#
# Prefix and Suffix for the instance variable on the "local" side of the fk
# Field Name is ${prefix}${referencedObjectClass}${suffix}
# If necessary ${relatedBy} followed by the column names is appended to this.
torque.om.complexObjectModel.localFieldNamePrefix = a
torque.om.complexObjectModel.localFieldNameSuffix =
torque.om.complexObjectModel.localFieldNameRelatedBy = RelatedBy

# Prefix and Suffix for the instance variable on the "foreign" side of the fk
# Field Name is ${prefix}${referencedObjectClass}${suffix}
# If necessary ${relatedBy} followed by the column names is appended to this.
torque.om.complexObjectModel.foreignFieldNamePrefix = coll
torque.om.complexObjectModel.foreignFieldNameSuffix = s
torque.om.complexObjectModel.foreignFieldNameRelatedBy = RelatedBy

# Prefix and Suffix for the adder method on the "local" side of the fk
# Method name is ${prefix}${referencedObjectClass}${suffix}
# If necessary ${torque.om.complexObjectModel.localFieldNameRelatedBy}
# followed by the column names is appended to this.
torque.om.complexObjectModel.adderPrefix = add
torque.om.complexObjectModel.adderSuffix =

# Prefix and Suffix for the resetter method on the "local" side of the fk
# Method name is ${prefix}${referencedObjectClass}${suffix}
# If necessary ${torque.om.complexObjectModel.localFieldNameRelatedBy}
# followed by the column names is appended to this.
torque.om.complexObjectModel.resetterPrefix = reset
torque.om.complexObjectModel.resetterSuffix =

# Prefix and Suffix for the initializer method on the "local" side of the fk
# Method name is ${prefix}${referencedObjectClass}${suffix}
# If necessary ${torque.om.complexObjectModel.localFieldNameRelatedBy}
# followed by the column names is appended to this.
torque.om.complexObjectModel.initializerPrefix = init
torque.om.complexObjectModel.initializerSuffix = s

# Prefix and Suffix for the isInitialized method on the "local" side of the fk
# Method name is ${prefix}${referencedObjectClass}${suffix}
# If necessary ${torque.om.complexObjectModel.localFieldNameRelatedBy}
# followed by the column names is appended to this.
torque.om.complexObjectModel.isInitializedPrefix = is
torque.om.complexObjectModel.isInitializedSuffix = sInitialized

# Type of the instance variable on the "foreign" side of the fk
# This type will be generified.
torque.om.complexObjectModel.foreignFieldType = List
# The type of the object the variable on the "foreign" side will be
# initialized with in the init method
torque.om.complexObjectModel.foreignFieldInitType = ArrayList

# Whether doSelectJoin methods are generated in the Peer classes
# which fetch related objects in one database query
torque.om.complexObjectModel.generateDoSelectJoin = true

# Whether joinGetter methods are generated in the data object classes
# which fetch related objects in one database query
torque.om.complexObjectModel.generateJoinGetters = true
# The separator in the joinGetter Methods between the two name parts
torque.om.complexObjectModel.joinGetterSeparator = sJoin
# The visibility of the joinGetter methods
torque.om.complexObjectModel.joinGetterVisibility = protected

# Whether filler methods are generated which can efficiently read
# data objects related by a foreign key relation for a list of other
# data objects.
# This setting has no effect if torque.om.objectIsCaching is NOT set to true,
# in this case no fillers are generated even if the property below is set
# to true
torque.om.complexObjectModel.generateFillers = true

# Prefix and Suffix for the filler method on the "local" side of the fk
# Method name is ${prefix}${referencedObjectClass}${suffix}
# If necessary ${torque.om.complexObjectModel.localFieldNameRelatedBy}
# followed by the column names is appended to this.
torque.om.complexObjectModel.fillerPrefix = fill
torque.om.complexObjectModel.fillerSuffix = s
# The part which is added to the filler methods in the case that
# filler methods for referencing and referenced objects have the same name
torque.om.complexObjectModel.fillerReferencingDistinction = Referencing

# The prefix of the setAndSave methods.
torque.om.complexObjectModel.setAndSavePrefix = setAndSave
# The suffix of the setAndSave methods. */
torque.om.complexObjectModel.setAndSaveSuffix = s

# The default chunk size for the filler methods.
torque.om.complexObjectModel.defaultFillerChunkSize=999

# The name of the option for the default value used in optimistic locking
# if no explicit default value is set.
torque.om.optimisticLocking.defaultValue = 0
# The name of the option for the default mode used in optimistic locking.
# Must be one of selectForUpdate, simpleSelect.
torque.om.optimisticLocking.mode = selectForUpdate

# The default base class for all data objects.
# can be overridden by setting the baseClass attribute on a table.
torque.om.dbObjectDefaultBaseClass =
# The base class for all Peer classes
torque.om.basePeerBaseClass =
# The base class for all Peer implementation classes
torque.om.basePeerImplBaseClass = org.apache.torque.util.AbstractPeerImpl

# Prefixes and suffixes for the java names of the generated classes
#
# Prefix and suffix for the base data object classes
torque.om.className.baseDbObjectClassNamePrefix = Base
torque.om.className.baseDbObjectClassNameSuffix =
# Prefix and suffix for the peer classes
torque.om.className.peerClassNamePrefix =
torque.om.className.peerClassNameSuffix = Peer
# Prefix and suffix for the peer implementation classes
torque.om.className.peerImplClassNamePrefix =
torque.om.className.peerImplClassNameSuffix = PeerImpl
# Prefix and suffix for the base peer classes
torque.om.className.basePeerClassNamePrefix = Base
torque.om.className.basePeerClassNameSuffix = Peer
# Prefix and suffix for the base peer implementation classes
torque.om.className.basePeerImplClassNamePrefix = Base
torque.om.className.basePeerImplClassNameSuffix = PeerImpl
# Prefix and suffix for the manager classes
torque.om.className.managerClassNamePrefix =
torque.om.className.managerClassNameSuffix = Manager
# Prefix and suffix for the manager base classes
torque.om.className.baseManagerClassNamePrefix = Base
torque.om.className.baseManagerClassNameSuffix = Manager
# Prefix and suffix for the bean classes
torque.om.className.beanClassNamePrefix =
torque.om.className.beanClassNameSuffix = Bean
# Prefix and suffix for the base bean classes
torque.om.className.baseBeanClassNamePrefix = Base
torque.om.className.baseBeanClassNameSuffix = Bean
# Prefix and suffix for the record mapper classes
torque.om.className.recordMapperClassNamePrefix =
torque.om.className.recordMapperClassNameSuffix = RecordMapper
# Prefix and suffix for the base record mapper classes
torque.om.className.baseRecordMapperClassNamePrefix = Base
torque.om.className.baseRecordMapperClassNameSuffix = RecordMapper

# Suffixes for the package names of the generated classes
#
# package suffix for the data object classes
torque.om.package.dbObjectPackageSuffix =
# package suffix for the base data object classes
torque.om.package.baseDbObjectPackageSuffix =
# package suffix for the peer classes
torque.om.package.peerPackageSuffix =
# package suffix for the base peer classes
torque.om.package.basePeerPackageSuffix =
# package suffix for the reccord mapper classes
torque.om.package.recordMapperPackageSuffix =
# package suffix for the base reccord mapper classes
torque.om.package.baseRecordMapperPackageSuffix =
# package suffix for the manager classes
torque.om.package.managerPackageSuffix = .manager
# package suffix for the base manager classes
torque.om.package.baseManagerPackageSuffix = .manager.base
# package suffix for the bean classes
torque.om.package.beanPackageSuffix = .bean
# package suffix for the base bean classes
torque.om.package.baseBeanPackageSuffix = .bean
# package suffix for the map init classes
torque.om.package.mapInitPackageSuffix =

# Default column type if the column type is not set for a column
torque.om.column.defaultType = VARCHAR

# The prefix for the name of enum types.
torque.om.enumTypePrefix =
# The suffix for the name of enum types.
torque.om.enumTypeSuffix = Enum

# Whether to generate the deprecated retrieveByPKs methods,
# which have been renamed to retrieveByObjectKeys.
# These methods only provide backwards compatibility,
# the same functionality is provided by the retrieveByObjectKeys methods.
torque.om.retrieve.bypk.deprecated = true
