## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: copyMethods.vm 1850502 2019-01-05 16:47:35Z painter $
##
## Creates the copy methods for a database base object.
## This template expects as input a "table" element from the torque schema
## which was processed by the OMTransformer.  
##
    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
  #if ($torqueGen.booleanOption("torque.om.complexObjectModel") && $torqueGen.booleanOption("torque.om.objectIsCaching"))
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
  #end
	 * @throws TorqueException if retrieval of the associated objects fails  
     */
    public $dbObjectClassName copy() throws TorqueException
    {
#if ($torqueGen.booleanOption("torque.om.complexObjectModel") && $torqueGen.booleanOption("torque.om.objectIsCaching"))
        return copy(true);
#else
$torqueGen.mergepoint("createObjectInstance")
        return copyInto($field);
#end
    }

#if ($torqueGen.booleanOption("torque.om.complexObjectModel") && $torqueGen.booleanOption("torque.om.objectIsCaching"))
    /**
     * Makes a copy of this object using a connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
	 * @throws TorqueException if retrieval of the associated objects fails     
     */
    public $dbObjectClassName copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public $dbObjectClassName copy(boolean deepcopy) throws TorqueException
    {
$torqueGen.mergepoint("createObjectInstance")
        return copyInto($field, deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public $dbObjectClassName copy(boolean deepcopy, Connection con) throws TorqueException
    {
$torqueGen.mergepoint("createObjectInstance")
        return copyInto($field, deepcopy, con);
    }
#end
  
#if ($torqueGen.booleanOption("torque.om.complexObjectModel") && $torqueGen.booleanOption("torque.om.objectIsCaching"))
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public $dbObjectClassName copyInto($dbObjectClassName copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public $dbObjectClassName copyInto($dbObjectClassName copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
#end
  
    /**
     * Fills the copyObj with the contents of this object.
#if ($torqueGen.booleanOption("torque.om.complexObjectModel") && $torqueGen.booleanOption("torque.om.objectIsCaching"))
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
#end
     * @param copyObj the object to fill.
#if ($torqueGen.booleanOption("torque.om.complexObjectModel") && $torqueGen.booleanOption("torque.om.objectIsCaching"))
     * @param deepcopy whether the associated objects should be copied.
#end
     * @throws TorqueException if retrieval of the associated objects fails
     */
#if ($torqueGen.booleanOption("torque.om.complexObjectModel") && $torqueGen.booleanOption("torque.om.objectIsCaching"))
    protected $dbObjectClassName copyInto($dbObjectClassName copyObj, boolean deepcopy) throws TorqueException
#else
    protected $dbObjectClassName copyInto($dbObjectClassName copyObj) throws TorqueException
#end
    {
#set ( $columnElements = $torqueGen.getChildren("column") )
#foreach ($columnElement in $columnElements)
  #set ( $setter = $columnElement.getAttribute("setter") )
  #set ( $columnField = $columnElement.getAttribute("field") )
  #set ( $columnFieldType = $columnElement.getAttribute("fieldType") )
  #set ( $defaultValue = $columnElement.getAttribute("defaultValue") )
  #if($columnElement.getAttribute("primaryKey") != "true")
        copyObj.${setter}($columnField);
  #else
    #if($columnElement.getAttribute("primitive") == "true")
        copyObj.${setter}($defaultValue);
    #else
        copyObj.${setter}((${columnFieldType}) $defaultValue);
    #end
  #end
#end

#if ($torqueGen.booleanOption("torque.om.complexObjectModel") && $torqueGen.booleanOption("torque.om.objectIsCaching"))
  #set ($foreignKeyElements = $torqueGen.getChild("referencing-foreign-keys").getChildren("foreign-key"))
        if (deepcopy)
        {
  #foreach ($foreignKeyElement in $foreignKeyElements)
    #set ( $foreignFieldElement = $foreignKeyElement.getChild("foreign-field"))
    ## if the referencing table is in an external schema, 
    ## foreignFieldElement is null. In this case,skip the foolowing code.
    #if ($foreignFieldElement)
      #set ( $foreignTableElement = $foreignKeyElement.getParent())
      #set ( $foreignTableName = $foreignTableElement.getAttribute("name"))
      #set ( $columnField = $foreignFieldElement.getAttribute("field"))
      #set ( $columnFieldType = $foreignFieldElement.getAttribute("fieldType"))
      #set ( $columnFieldContainedType = $foreignFieldElement.getAttribute("fieldContainedType"))
      #set ( $getter = $foreignFieldElement.getAttribute("getter"))
      #set ( $adder = $foreignFieldElement.getAttribute("adder"))
      #if ($foreignTableName != $name)
        #if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
          ## field can be null if the generator property
          ## torque.silentDbFetch is set to false
            if ($columnField != null)
            {
                for (${columnFieldContainedType} obj : ${columnField})
                {
                    copyObj.${adder}(obj.copy());
                }
            }
            else
            {
                copyObj.${columnField} = null;
            }
        #end
      #end
    #end
  #end
        }
#end
        return copyObj;
    }
        
    
#if ($torqueGen.booleanOption("torque.om.complexObjectModel") && $torqueGen.booleanOption("torque.om.objectIsCaching"))
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public $dbObjectClassName copyInto($dbObjectClassName copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
  #set ( $columnElements = $torqueGen.getChildren("column") )
  #foreach ($columnElement in $columnElements)
    #set ( $setter = $columnElement.getAttribute("setter") )
    #set ( $columnField = $columnElement.getAttribute("field") )
    #set ( $columnFieldType = $columnElement.getAttribute("fieldType") )
    #set ( $defaultValue = $columnElement.getAttribute("defaultValue") )
    #if($columnElement.getAttribute("primaryKey") != "true")
        copyObj.${setter}($columnField);
    #else
      #if($columnElement.getAttribute("primitive") == "true")
        copyObj.${setter}($defaultValue);
      #else
        copyObj.${setter}((${columnFieldType}) $defaultValue);
      #end
    #end
  #end

  #set ($foreignKeyElements = $torqueGen.getChild("referencing-foreign-keys").getChildren("foreign-key"))
        if (deepcopy)
        {
  #foreach ($foreignKeyElement in $foreignKeyElements)
    #set ( $foreignFieldElement = $foreignKeyElement.getChild("foreign-field"))
    ## if the referencing table is in an external schema, 
    ## foreignFieldElement is null. In this case,skip the following code.
    #if ($foreignFieldElement)
      #set ( $foreignTableElement = $foreignKeyElement.getParent())
      #set ( $foreignTableName = $foreignTableElement.getAttribute("name"))
      #set ( $columnField = $foreignFieldElement.getAttribute("field"))
      #set ( $columnFieldContainedType = $foreignFieldElement.getAttribute("fieldContainedType"))
      #set ( $getter = $foreignFieldElement.getAttribute("getter"))
      #set ( $adder = $foreignFieldElement.getAttribute("adder"))
      #if ($foreignTableName != $name)
            for (${columnFieldContainedType} obj : $getter(con))
            {
                copyObj.${adder}(obj.copy());
            }
      #end
    #end
  #end
        }
        return copyObj;
    }
#end
