## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: getBeanDeep.vm 1331196 2012-04-27 02:56:12Z tfischer $
##
## This template creates source code for a base bean. 
## The template expects as input a "table" element from the torque schema
## which was processed by the OMTransformer.  
##

#set ( $foreignKeyElement = $torqueGen.getParent() )
#set ( $localTableElement = $foreignKeyElement.getChild("table") )
#set ( $localClassName = $localTableElement.getAttribute("dbObjectClassName") )
#set ( $foreignKeyLocalFieldElement = $foreignKeyElement.getChild("local-field") )
#set ( $foreignKeyLocalColumnSetter = $foreignKeyLocalFieldElement.getAttribute("setter"))
#set ( $foreignKeyLocalColumnGetter = $foreignKeyLocalFieldElement.getAttribute("getter"))

      #if ($foreignKeyElement.getChildren("local-columns").size() > 1)

        if (get${objectMethodSuffix}JoinAll(conn) != null)
        {
            ${relatedBeanClassName} relatedBean = ${varName}.getBeanDeep(ignoreTableName, fetcher, conn);
            result.set${beanMethodSuffix}(relatedBean);

            #if($relatedClassName == $localClassName)
            relatedBean.set${localClassName}Bean${relCol}(result);
            #else
            if(!relatedBean.get${localClassName}Beans${relCol}().stream().anyMatch((b) -> b == result))
              relatedBean.add${localClassName}Beans${relCol}(result);
            #end
        }

      #else

        if( $conditional )
        {
          ${relatedBeanClassName} relatedBean = (${relatedBeanClassName}) fetcher
              .getCreatedBeen(${relatedClassName}Peer.TABLE_NAME, ${getparam});

          if (relatedBean == null && get${objectMethodSuffix}JoinAll(conn) != null)
          {
              relatedBean = ${varName}.getBeanDeep(ignoreTableName, fetcher, conn);
          }

          if( relatedBean != null)
          {
              result.set${beanMethodSuffix}(relatedBean);

              #if($relatedClassName == $localClassName)
              relatedBean.set${localClassName}Bean${relCol}(result);
              #else
              if(!relatedBean.get${localClassName}Beans${relCol}().stream().anyMatch((b) -> b == result))
                relatedBean.add${localClassName}Beans${relCol}(result);
              #end
          }
        }

      #end
      
      
