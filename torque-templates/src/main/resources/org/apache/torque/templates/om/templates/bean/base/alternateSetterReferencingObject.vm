## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: setterReferencingObject.vm 1879896 2020-07-15 15:03:46Z gk $
##
## This template creates the setter for a collection of referencing objects in a 
## base bean.
## It expects to be executed on a
## referencing-foreign-keys/foreign-key/foreign-field-in-bean
## source element.
##
    /**
     * Set the collection of ${fieldContainedType}s. 
#if ($description)
     * The field is described as follows: 
     * $description
#end
     *
     * @param list new value
     */
    public void ${setter}($fieldType list)
    {
        this.${field}.clear();
    
        if (list != null)
        {
            this.${field}.addAll(list);
        }
    }
    
#set ( $foreignKeyElement = $torqueGen.getParent() )
#set ( $tableForeign = $foreignKeyElement.getParent() )
#set ( $tableLocal   = $foreignKeyElement.getChild("table") )
#set ( $addmethod = $setter.toString().replace("set", "add") )

#set ( $localbeanClassName   = $tableLocal.getAttribute("beanClassName") )
#set ( $foreignbeanClassName = $tableForeign.getAttribute("beanClassName") )

#set ($index = $field.indexOf('RelatedBy'))
#if  ($index == -1)
#set ($val1 = "")
#else
#set ($val1 = $field.substring($index))
#end

    /**
     * Add at the collection of ${foreignbeanClassName} the specified value
     */
    public void ${addmethod}(Collection<${foreignbeanClassName}> list)
    {   
        if (list != null && !list.isEmpty())
        {
            list.forEach((obj) -> obj.set${localbeanClassName}${val1}((${localbeanClassName})this));
            ${field}.addAll(list);
        }
    }


    /**
     * Add an object to the collection of ${foreignbeanClassName}
     */
    public void ${addmethod}($foreignbeanClassName obj)
    {
        obj.set${localbeanClassName}${val1}((${localbeanClassName})this);
        ${field}.add(obj);
    }

    