## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: getterReferencingObject.vm 1850502 2019-01-05 16:47:35Z painter $
##
## This template creates the getter method in the object for the "foreign" part
## of a foreign key. The objects in the field represent the "local" part
## of the foreign key.  
## The template expects as input a "foreign-field" element inside a 
## "referencing-foreign-keys/foreign-key" element
##
#set ( $silentDbFetch = $torqueGen.booleanOption("torque.om.silentDbFetch") )
#set ( $foreignKeyElement = $torqueGen.getParent() )
#set ( $thisObjectClassName = $foreignKeyElement.getChild("table").getAttribute("baseDbObjectClassName") )
#set ( $otherTable = $foreignKeyElement.getParent() )
#set ( $otherTablePeerClass = $otherTable.getAttribute("peerClassName") )
#set ( $otherTablePeerPackage = $otherTable.getAttribute("peerPackage") )
#set ( $otherTablePeerName = "${otherTablePeerPackage}.${otherTablePeerClass}" )
#set ( $referenceElements = $foreignKeyElement.getChildren("reference") )
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
    /**
     * The criteria used to select the current contents of $field
     */
    private Criteria $criteriaCacheField = null;

#end
    /**
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
  #if (!$silentDbFetch)
     * Returns the Collection.
  #else
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * ${getter}(new Criteria())
  #end
#else
     * A wrapper for ${getter}(new Criteria())
#end
     *
     * @return the collection of associated objects
#if ($silentDbFetch)
     * @throws TorqueException
#end
     * @deprecated use version with explicit connection
     */
    public $fieldType ${getter}()
#if ($silentDbFetch)
        throws TorqueException
#end
    {
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
  #if (!$silentDbFetch)
        if (isNew())
        {
            ${initializer}();
        }
  #else
        if ($field == null)
        {
            $field = ${getter}(new Criteria());
$torqueGen.setVariable("indent", "            ")##
$torqueGen.mergepoint("backreference")##
        }
  #end
        return $field;
#else
        return ${getter}(new Criteria());
#end
    }

    /**
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this $thisObjectClassName has previously
#else
     * If this $thisObjectClassName has previously
#end
     * been saved, it will retrieve related ${field} from storage.
     * If this $thisObjectClassName is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     * @deprecated use version with explicit connection
     */
    public $fieldType ${getter}(Criteria criteria) throws TorqueException
    {
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
        if ($field == null)
        {
            if (isNew())
            {
               ${initializer}();
            }
            else
            {
  #foreach ($referenceElement in $referenceElements)
    #set ( $otherTableColumnElement = $referenceElement.getChild("local-column").getChild("column") )
    #set ( $thisTableColumnElement = $referenceElement.getChild("foreign-column").getChild("column") )
    #set ( $otherTablePeerColumnName = $otherTableColumnElement.getAttribute("peerColumnName") )
    #set ( $thisTableColumnGetter = $thisTableColumnElement.getAttribute("getter") )
                criteria.and(${otherTablePeerName}.${otherTablePeerColumnName}, ${thisTableColumnGetter}());
  #end
                $field = ${otherTablePeerName}.doSelect(criteria);
$torqueGen.setVariable("indent", "                ")##
$torqueGen.mergepoint("backreference")##
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
#end
#foreach ($referenceElement in $referenceElements)
  #set ( $otherTableColumnElement = $referenceElement.getChild("local-column").getChild("column") )
  #set ( $thisTableColumnElement = $referenceElement.getChild("foreign-column").getChild("column") )
  #set ( $otherTablePeerColumnName = $otherTableColumnElement.getAttribute("peerColumnName") )
  #set ( $thisTableColumnGetter = $thisTableColumnElement.getAttribute("getter") )
                criteria.and(${otherTablePeerName}.${otherTablePeerColumnName}, ${thisTableColumnGetter}());
#end
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
                if (${criteriaCacheField} == null
                        || !${criteriaCacheField}.equals(criteria))
                {
                    $field = ${otherTablePeerName}.doSelect(criteria);
$torqueGen.setVariable("indent", "                    ")##
$torqueGen.mergepoint("backreference")##
                }
            }
        }
        $criteriaCacheField = criteria;
        return $field;
#else
        return ${otherTablePeerName}.doSelect(criteria);
#end
    }

    /**
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * ${getter}(new Criteria(),Connection)
#else
     * A wrapper for ${getter}(new Criteria(),Connection)
#end
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return $fieldType results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public $fieldType ${getter}(Connection con) throws TorqueException
    {
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
        if ($field == null)
        {
            $field = ${getter}(new Criteria(), con);
$torqueGen.setVariable("indent", "            ")##
$torqueGen.mergepoint("backreference")##
        }
        return $field;
#else
        return ${getter}(new Criteria(), con);
#end
    }

    /**
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this $thisObjectClassName has previously
#else
     * If this $thisObjectClassName has previously
#end
     * been saved, it will retrieve the related $fieldContainedType Objects
     * from storage.
     * If this $thisObjectClassName is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return $fieldType results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public $fieldType ${getter}(Criteria criteria, Connection con)
            throws TorqueException
    {
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
        if ($field == null)
        {
            if (isNew())
            {
               $initializer();
            }
            else
            {
  #foreach ($referenceElement in $referenceElements)
    #set ( $otherTableColumnElement = $referenceElement.getChild("local-column").getChild("column") )
    #set ( $thisTableColumnElement = $referenceElement.getChild("foreign-column").getChild("column") )
    #set ( $otherTablePeerColumnName = $otherTableColumnElement.getAttribute("peerColumnName") )
    #set ( $thisTableColumnGetter = $thisTableColumnElement.getAttribute("getter") )
                criteria.and(${otherTablePeerName}.${otherTablePeerColumnName}, ${thisTableColumnGetter}());
  #end
                $field = ${otherTablePeerName}.doSelect(criteria, con);
$torqueGen.setVariable("indent", "                ")##
$torqueGen.mergepoint("backreference")##
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
#end
#foreach ($referenceElement in $referenceElements)
  #set ( $otherTableColumnElement = $referenceElement.getChild("local-column").getChild("column") )
  #set ( $thisTableColumnElement = $referenceElement.getChild("foreign-column").getChild("column") )
  #set ( $otherTablePeerColumnName = $otherTableColumnElement.getAttribute("peerColumnName") )
  #set ( $thisTableColumnGetter = $thisTableColumnElement.getAttribute("getter") )
                criteria.and(${otherTablePeerName}.${otherTablePeerColumnName}, ${thisTableColumnGetter}());
#end
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
                if (${criteriaCacheField} == null
                        || !${criteriaCacheField}.equals(criteria))
                {
                    $field = ${otherTablePeerName}.doSelect(criteria, con);
$torqueGen.setVariable("indent", "                    ")##
$torqueGen.mergepoint("backreference")##
                }
            }
        }
        ${criteriaCacheField} = criteria;

        return $field;
#else
        return ${otherTablePeerName}.doSelect(criteria, con);
#end
    }

    public $fieldType ${getter}JoinAll(Connection con)
            throws TorqueException
    {
      return ${getter}JoinAll(new Criteria(), con);
    }
    
    /**
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this $thisObjectClassName has previously
#else
     * If this $thisObjectClassName has previously
#end
     * been saved, it will retrieve the related $fieldContainedType Objects
     * from storage.
     * If this $thisObjectClassName is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return $fieldType results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public $fieldType ${getter}JoinAll(Criteria criteria, Connection con)
            throws TorqueException
    {
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
        if ($field == null)
        {
            if (isNew())
            {
               $initializer();
            }
            else
            {
  #foreach ($referenceElement in $referenceElements)
    #set ( $otherTableColumnElement = $referenceElement.getChild("local-column").getChild("column") )
    #set ( $thisTableColumnElement = $referenceElement.getChild("foreign-column").getChild("column") )
    #set ( $otherTablePeerColumnName = $otherTableColumnElement.getAttribute("peerColumnName") )
    #set ( $thisTableColumnGetter = $thisTableColumnElement.getAttribute("getter") )
                criteria.and(${otherTablePeerName}.${otherTablePeerColumnName}, ${thisTableColumnGetter}());
  #end
                $field = ${otherTablePeerName}.doSelectJoinAllForBeans(criteria, null, con);
$torqueGen.setVariable("indent", "                ")##
$torqueGen.mergepoint("backreference")##
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
#end
#foreach ($referenceElement in $referenceElements)
  #set ( $otherTableColumnElement = $referenceElement.getChild("local-column").getChild("column") )
  #set ( $thisTableColumnElement = $referenceElement.getChild("foreign-column").getChild("column") )
  #set ( $otherTablePeerColumnName = $otherTableColumnElement.getAttribute("peerColumnName") )
  #set ( $thisTableColumnGetter = $thisTableColumnElement.getAttribute("getter") )
                criteria.and(${otherTablePeerName}.${otherTablePeerColumnName}, ${thisTableColumnGetter}());
#end
#if ($torqueGen.booleanOption("torque.om.objectIsCaching"))
                if (${criteriaCacheField} == null
                        || !${criteriaCacheField}.equals(criteria))
                {
                    $field = ${otherTablePeerName}.doSelectJoinAllForBeans(criteria, null, con);
$torqueGen.setVariable("indent", "                    ")##
$torqueGen.mergepoint("backreference")##
                }
            }
        }
        ${criteriaCacheField} = criteria;

        return $field;
#else
        return ${otherTablePeerName}.doSelectJoinAllForBeans(criteria, null, con);
#end
    }

    