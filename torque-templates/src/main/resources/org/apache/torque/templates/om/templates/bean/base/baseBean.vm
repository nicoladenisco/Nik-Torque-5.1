## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: baseBean.vm 1870490 2019-11-27 08:10:15Z gk $
##
## This template creates source code for a base bean. 
## The template expects as input a "table" element from the torque schema
## which was processed by the OMTransformer.  
##
package ${baseBeanPackage};

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import java.util.Objects;
import org.apache.commons.collections.map.IdentityMap;

#if ($baseBeanPackage != $beanPackage)
  import ${beanPackage}.*;
#end

#set ( $currentPackage = $beanPackage )
#set ( $foreignKeyElements = $torqueGen.getChildren("foreign-key"))
#foreach ($foreignKeyElement in $foreignKeyElements)
  #set ( $foreignTableElement = $foreignKeyElement.getChild("table"))
  #set ( $foreignBeanPackage = $foreignTableElement.getAttribute("beanPackage"))
  #set ( $foreignBeanClassName = $foreignTableElement.getAttribute("beanClassName"))
  #if  (!$foreignBeanPackage.equals($currentPackage) )
import ${foreignBeanPackage}.${foreignBeanClassName};
  #end
#end
#foreach ($columnElement in $torqueGen.getSourceElement().getChildren("column"))
  #set ($colEnumPackage = $columnElement.getAttribute("enumPackage"))
  #set ($colEnumClassName = $columnElement.getAttribute("enumClassName"))
  #if ($columnElement.getAttribute("isEnum") == "true" && $colEnumPackage != $baseBeanPackage) 
import ${colEnumPackage}.${colEnumClassName};
  #end
#end

$torqueGen.mergepoint("classJavadoc")
@SuppressWarnings("unused")
public abstract class $baseBeanClassName
#if ( $torqueGen.option("beanExtendsClass") && $torqueGen.option("beanExtendsClass") != "" ) 
    extends $torqueGen.option("beanExtendsClass")
#end
    implements Serializable, Cloneable
{
$torqueGen.mergepoint("serialVersionUid")

## ----------------
## member variables
## ----------------
    /**
     * whether the bean or its underlying object has changed
     * since last reading from the database
     */
    protected boolean modified = true;

    /**
     * false if the underlying object has been read from the database,
     * true otherwise
     */
    protected boolean isNew = true;

## field definitions for columns
$torqueGen.mergepoint("fieldDefinitions")
##
## field definitions for referenced objects
#if ($torqueGen.booleanOption("torque.om.complexObjectModel"))
$torqueGen.mergepoint("fieldDefinitionsReferencedObjects")
##
## field definitions for referencing objects
$torqueGen.mergepoint("fieldDefinitionsReferencingObjects")
#end

## -------------------------
## getter and setter methods
## -------------------------

    /**
     * sets whether the bean exists in the database
     *
     * @param isNew if this is a new object
     */
    public void setNew(boolean isNew)
    {
        this.isNew = isNew;
    }

    /**
     * returns whether the bean exists in the database
     *
     * @return boolean true if the object is new
     */
    public boolean isNew()
    {
        return this.isNew;
    }

    /**
     * sets whether the bean or the object it was created from
     * was modified since the object was last read from the database
     *
     * @param isModified if the object has been modified since last read
     */
    public void setModified(boolean isModified)
    {
        this.modified = isModified;
    }

    /**
     * returns whether the bean or the object it was created from
     * was modified since the object was last read from the database
     *
     * @return boolean true if the object is modified
     */
    public boolean isModified()
    {
        return this.modified;
    }

    @Override
    public Object clone() throws CloneNotSupportedException
    {
      return super.clone();
    }
  
$torqueGen.mergepoint("gettersSetters")
$torqueGen.mergepoint("copyMethods")
$torqueGen.mergepoint("toString")

#if ($torqueGen.booleanOption("torque.om.complexObjectModel"))
$torqueGen.mergepoint("gettersSettersReferencedObjects")
$torqueGen.mergepoint("gettersSettersReferencingObjects")
$torqueGen.mergepoint("deepClone")
#end

$torqueGen.mergepoint("getCurrentDate")##
$torqueGen.mergepoint("getCurrentTime")##
$torqueGen.mergepoint("getCurrentTimestamp")##
}
