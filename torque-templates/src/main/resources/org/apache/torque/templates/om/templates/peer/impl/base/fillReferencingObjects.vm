## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: fillReferencingObjects.vm 1849387 2018-12-20 13:42:45Z tv $
##
## Creates the fillXXX methods for referencing Objects for the base peer
## implementation.
## 
## This template expects the current source element to be a "foreign-field" 
## element from the schema, processed by the OMTransformer.
## The options and the attributes of the current source element must be set
## as velocity variables.  
##
#set ( $foreignKeyElement = $torqueGen.getParent() )
#set ( $foreignKeyGetter = $foreignKeyElement.getAttribute("foreignKeyGetter") )
#set ( $referencesPrimaryKey = $foreignKeyElement.getAttribute("referencesPrimaryKey") )
#set ( $foreignKeyReferences = $foreignKeyElement.getChildren("reference") )
#set ( $localTableElement = $foreignKeyElement.getChild("table") )
#set ( $localTableField = $localTableElement.getAttribute("field") )
#set ( $localDbObjectClassName = $localTableElement.getAttribute("dbObjectClassName") )
#set ( $localPeerClassName = $localTableElement.getAttribute("peerClassName") )
#set ( $primaryKeyColumnElements = $localTableElement.getChild("primary-keys").getChildren("column"))
#set ( $foreignTableElement = $foreignKeyElement.getParent() )
#set ( $foreignTablePeerClassName = $foreignTableElement.getAttribute("peerClassName") )
#set ( $trackModified = $torqueGen.booleanOption("torque.om.trackModified"))
#set ( $trackNew = $torqueGen.booleanOption("torque.om.trackNew"))
#set ( $trackSaving = $torqueGen.booleanOption("torque.om.trackSaving"))
#set ( $trackLoading = $torqueGen.booleanOption("torque.om.trackLoading"))
#set ( $trackDeleted = $torqueGen.booleanOption("torque.om.trackDeleted"))
    /** 
     * Fills the referenced ${fieldContainedType} objects in the ${field} fields
     * of the objects in <code>toFill</code> by reading the database.
     * ${localPeerClassName}.DEFAULT_FILLER_CHUNK_SIZE is used as chunk size.
     *
     * @param toFill Contains the objects to fill, not null,
     *        may not contain null.
     *
     * @return all read ${fieldType} objects.
     *
     * @throws TorqueException if an error querying the database occurs.
     * @throws NullPointerException if toFill is null or contains null elements.
     */
    public List<${fieldContainedType}> ${filler}(
            Collection<${localDbObjectClassName}> toFill)
        throws TorqueException
    {
        return ${filler}(
                toFill,
                ${localPeerClassName}.DEFAULT_FILLER_CHUNK_SIZE);
    }

    /** 
     * Fills the referenced ${fieldContainedType} objects in the ${field} fields
     * of the objects in <code>toFill</code> by reading the database.
     *
     * @param toFill Contains the objects to fill, not null,
     *        may not contain null.
     * @param chunkSize The maximum number of referenced objects
     *        to be filled by a single database request, or -1
     *        to fill all objects at once.
     *
     * @return all read ${fieldType} objects.
     *
     * @throws TorqueException if an error querying the database occurs.
     * @throws NullPointerException if toFill is null or contains null elements.
     * @deprecated use version with explicit connection
     */
    public List<${fieldContainedType}> ${filler}(
            Collection<${localDbObjectClassName}> toFill,
            int chunkSize)
        throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            List<${fieldContainedType}> result = ${filler}(
                    toFill,
                    chunkSize,
                    connection);
            Transaction.commit(connection);
            return result;
        }
    }

    /** 
     * Fills the referenced ${fieldContainedType} objects in the ${field} fields
     * of the objects in <code>toFill</code> by reading the database.
     * ${localPeerClassName}.DEFAULT_FILLER_CHUNK_SIZE is used as chunk size.
     *
     * @param toFill Contains the objects to fill, not null,
     *        may not contain null.
     * @param connection the database connection to use, not null.
     *
     * @return all read ${fieldType} objects.
     *
     * @throws TorqueException if an error querying the database occurs.
     * @throws NullPointerException if toFill is null or contains null elements.
     */
    public List<${fieldContainedType}> ${filler}(
            Collection<${localDbObjectClassName}> toFill,
            Connection connection)
        throws TorqueException
    {
        return ${filler}(
                toFill,
                ${localPeerClassName}.DEFAULT_FILLER_CHUNK_SIZE,
                connection);
    }

    /** 
     * Fills the referenced ${fieldContainedType} objects in the ${field} fields
     * of the objects in <code>toFill</code> by reading the database.
     *
     * @param toFill Contains the objects to fill, not null,
     *        may not contain null.
     * @param chunkSize The maximum number of referenced objects
     *        to be filled by a single database request, or -1
     *        to fill all objects at once.
     * @param connection the database connection to use, not null.
     *
     * @return all read ${fieldType} objects.
     *
     * @throws TorqueException if an error querying the database occurs.
     * @throws NullPointerException if toFill is null or contains null elements.
     */
    public List<${fieldContainedType}> ${filler}(
            Collection<${localDbObjectClassName}> toFill,
            int chunkSize,
            Connection connection)
        throws TorqueException
    {
        Set<ObjectKey<?>> localKeySet = new HashSet<ObjectKey<?>>();
        for (${localDbObjectClassName} current${localDbObjectClassName} : toFill)
        {
#if ($referencesPrimaryKey)
            ObjectKey<?> localKey = current${localDbObjectClassName}.getPrimaryKey();
#else
  #if ($foreignKeyReferences.size() == 1)
    #set ( $localReferenceColumnElement = $foreignKeyReferences.get(0).getChild("foreign-column").getChild("column") )
    #set ( $localFieldGetter = $localReferenceColumnElement.getAttribute("getter") )
            ObjectKey<?> localKey = SimpleKey.keyFor(current${localDbObjectClassName}.${localFieldGetter}());
  #else
            SimpleKey<?>[] keyElementArray = new SimpleKey[$foreignKeyReferences.size()];
    #set ($i = 0)
    #foreach ($referenceElement in $foreignKeyReferences)
      #set ( $localReferenceColumnElement = $referenceElement.getChild("foreign-column").getChild("column") )
      #set ( $localFieldGetter = $localReferenceColumnElement.getAttribute("getter") )
            keyElementArray[$i] = SimpleKey.keyFor(
                    current${localDbObjectClassName}.${localFieldGetter}());
      #set ($i = $i + 1)
    #end
            ObjectKey<?> localKey = new ComboKey(keyElementArray);
  #end
#end
            localKeySet.add(localKey);
        }

        Iterator<ObjectKey<?>> localKeyIt = localKeySet.iterator();
        List<ObjectKey<?>> localKeyListChunk = new ArrayList<ObjectKey<?>>();
        Map<ObjectKey<?>, List<${fieldContainedType}>> fkTo${fieldContainedType}Map
                = new HashMap<ObjectKey<?>, List<${fieldContainedType}>>();
        while (localKeyIt.hasNext())
        {
            ObjectKey<?> currentKey = localKeyIt.next();
            localKeyListChunk.add(currentKey);
            if ((localKeyListChunk.size() < chunkSize || chunkSize == -1)
                && localKeyIt.hasNext())
            {
                continue;
            }

            Criteria criteria = new Criteria();
#if ($foreignKeyReferences.size() == 1)
  #set ( $columnElement = $foreignKeyReferences.get(0).getChild("local-column").getChild("column") )
  #set ( $peerColumnName = $columnElement.getAttribute("peerColumnName"))
            criteria.andIn(${foreignTablePeerClassName}.${peerColumnName}, localKeyListChunk);
#else
            for (ObjectKey<?> localKey : localKeyListChunk)
            {
                SimpleKey<?>[] keys = (SimpleKey[]) localKey.getValue();
  #set ( $i = 0 )
  #foreach ($referenceElement in $foreignKeyReferences)
  #set ( $columnElement = $referenceElement.getChild("local-column").getChild("column") )
    #set ( $peerColumnName = $columnElement.getAttribute("peerColumnName"))
                    Criterion c$i = new Criterion(
                        ${foreignTablePeerClassName}.${peerColumnName}, keys[$i], Criteria.EQUAL);
    #set ( $j = $i - 1 )
    #if ($i > 0)
                        c${j}.and(c${i});
    #end
    #set ( $i = $i + 1 )
  #end
                criteria.or(c0);
            }
#end
            List<${fieldContainedType}> referenced${fieldContainedType}List
                 = ${foreignTablePeerClassName}.doSelect(
                     criteria,
                     connection);
            for (${fieldContainedType} referencedObject : referenced${fieldContainedType}List)
            {
                ObjectKey<?> foreignKey = referencedObject.${foreignKeyGetter}();
                List<${fieldContainedType}> objectsWithForeignKey 
                    = fkTo${fieldContainedType}Map.get(foreignKey);
                if (objectsWithForeignKey == null)
                {
                    objectsWithForeignKey = new ArrayList<${fieldContainedType}>();
                    fkTo${fieldContainedType}Map.put(
                        foreignKey,
                        objectsWithForeignKey);
                }
                objectsWithForeignKey.add(referencedObject);
            }
            localKeyListChunk.clear();
        }

        List<${fieldContainedType}> result = new ArrayList<${fieldContainedType}>();
        for (${localDbObjectClassName} objectToFill : toFill)
        {
            objectToFill.${initializer}();
            objectToFill.${getter}().clear();
#if ($referencesPrimaryKey)
            ObjectKey<?> localKey = objectToFill.getPrimaryKey();
#else
  #if ($foreignKeyReferences.size() == 1)
    #set ( $localReferenceColumnElement = $foreignKeyReferences.get(0).getChild("foreign-column").getChild("column") )
    #set ( $localFieldGetter = $localReferenceColumnElement.getAttribute("getter") )
            ObjectKey<?> localKey = SimpleKey.keyFor(objectToFill.${localFieldGetter}());
  #else
            SimpleKey<?>[] keyElementArray = new SimpleKey[$foreignKeyReferences.size()];
    #set ($i = 0)
    #foreach ($referenceElement in $foreignKeyReferences)
      #set ( $localReferenceColumnElement = $referenceElement.getChild("foreign-column").getChild("column") )
      #set ( $localFieldGetter = $localReferenceColumnElement.getAttribute("getter") )
            keyElementArray[$i] = SimpleKey.keyFor(
                    objectToFill.${localFieldGetter}());
      #set ($i = $i + 1)
    #end
            ObjectKey<?> localKey = new ComboKey(keyElementArray);
  #end
#end
            List<${fieldContainedType}> referencingList
                = fkTo${fieldContainedType}Map.get(localKey);
            if (referencingList == null)
            {
                continue;
            }
            for (${fieldContainedType} referencing : referencingList)
            {
                // copy the referencing object for the case that more than one
                // toFill object references the same object; in this case
                // every toFillObject should have its own instance 
                // of the referencing object to remain consistent
                // with other Torque referencing object treatment
                ${fieldContainedType} referencingCopy = referencing.copy(false);
                // copy does not set primary key#if ($trackModified || $trackNew || $trackSaving || $trackLoading || $trackDeleted) and the flags#end

                referencingCopy.setPrimaryKey(referencing.getPrimaryKey());
#if ($trackModified)
                referencingCopy.setModified(referencing.isModified());
#end
#if ($trackNew)
                referencingCopy.setNew(referencing.isNew());
#end
#if ($trackSaving)
                referencingCopy.setSaving(referencing.isSaving());
#end
#if ($trackLoading)
                referencingCopy.setLoading(referencing.isLoading());
#end
#if ($trackDeleted)
                referencingCopy.setDeleted(referencing.isDeleted());
#end
                objectToFill.${adder}(referencingCopy);
                result.add(referencingCopy);
            }
        }
        return result;
    }
