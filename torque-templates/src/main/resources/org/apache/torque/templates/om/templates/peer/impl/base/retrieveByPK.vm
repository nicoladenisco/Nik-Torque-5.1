## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: retrieveByPK.vm 1849386 2018-12-20 13:28:59Z tv $
##
## Creates the retrieveByPk methods for the base peer.
## 
## This template expects the current source element to be a "table" element 
## from the torque schema.
## The schema needs to be processed by the OMTransformer.
## The options and the attributes of the current source element must be set
## as velocity variables.  
##
#set ( $primaryKeyColumnElements = $torqueGen.getChild("primary-keys").getChildren("column"))
#if (!$primaryKeyColumnElements.isEmpty())
  #if ($primaryKeyColumnElements.size() == 1)
    #set ( $columnElement = $primaryKeyColumnElements.get(0) )
    #set ( $columnFieldType = $columnElement.getAttribute("fieldType"))
    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     * @deprecated use version with explicit connection
     */
    public $dbObjectClassName retrieveByPK($columnFieldType pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public $dbObjectClassName retrieveByPK($columnFieldType pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk), con);
    }
    
    
    
  #elseif ($primaryKeyColumnElements.size() > 1)
    /**
     * retrieve object using using pk values.
     *
    #foreach ($columnElement in $primaryKeyColumnElements)
    #set ( $columnField = $columnElement.getAttribute("field") )
    #set ( $columnFieldType = $columnElement.getAttribute("fieldType") )
     * @param $columnField $columnFieldType
    #end
     * @deprecated use version with explicit connection
     */
    public $dbObjectClassName retrieveByPK(
    #set ( $elementCount = 1 )
    #foreach ($columnElement in $primaryKeyColumnElements)
      #set ( $columnField = $columnElement.getAttribute("field") )
      #set ( $columnFieldType = $columnElement.getAttribute("fieldType") )
            $columnFieldType $columnField#if($elementCount != $primaryKeyColumnElements.size()),#else)#end

      #set ( $elementCount = $elementCount + 1 )
    #end
        throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            $dbObjectClassName result = retrieveByPK(
    #foreach ($columnElement in $primaryKeyColumnElements)
      #set ( $columnField = $columnElement.getAttribute("field") )
               ${columnField},
    #end
               connection);
            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * retrieve object using using pk values.
     *
    #foreach ($columnElement in $primaryKeyColumnElements)
      #set ( $columnField = $columnElement.getAttribute("field") )
      #set ( $columnFieldType = $columnElement.getAttribute("fieldType") )
     * @param $columnField $columnFieldType
    #end
     * @param con Connection
     */
    public $dbObjectClassName retrieveByPK(
    #foreach ($columnElement in $primaryKeyColumnElements)
      #set ( $columnField = $columnElement.getAttribute("field") )
      #set ( $columnFieldType = $columnElement.getAttribute("fieldType") )
            $columnFieldType ${columnField},
    #end
            Connection con) throws TorqueException
    {

        Criteria criteria = new Criteria();
    #foreach ($columnElement in $primaryKeyColumnElements)
      #set ( $columnField = $columnElement.getAttribute("field") )
      #set ( $peerColumnName = $columnElement.getAttribute("peerColumnName") )
        criteria.and(${peerClassName}.${peerColumnName}, $columnField);
    #end
        ${dbObjectClassName} v = doSelectSingleRecord(criteria, con);
        if (v == null)
        {
            throw new NoRowsException("Failed to select a row.");
        }

        return v;
    }
  #end

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     * @deprecated use version with explicit connection
     */
    public $dbObjectClassName retrieveByPK(ObjectKey<?> pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            $dbObjectClassName result = retrieveByPK(pk, connection);
            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public $dbObjectClassName retrieveByPK(ObjectKey<?> pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Criteria criteria = buildCriteria(pk);
        ${dbObjectClassName} v = doSelectSingleRecord(criteria, con);
        if (v == null)
        {
            throw new NoRowsException("Failed to select a row.");
        }

        return v;
    }

#end