## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
######
##
## version $Id: buildCriteria.vm 1849386 2018-12-20 13:28:59Z tv $
##
## Creates the buildCriteria methods in the base peer class. 
## 
## This template expects the current source element to be a "table" element 
## from the torque schema.
## The schema needs to be processed by the OMTransformer.
## The options and the attributes of the current source element must be set
## as velocity variables.  
##
#set ( $primaryKeyColumnElements = $torqueGen.getChild("primary-keys").getChildren("column") )
#if (!$primaryKeyColumnElements.isEmpty())
    /** 
     * Build a Criteria object which selects all objects which have a given
     * primary key.
     *
     * @param pk the primary key value to build the criteria from, not null.
     */
    public static Criteria buildCriteria(ObjectKey<?> pk)
    {
        return ${peerImplGetter}().buildCriteria(pk);
    }

    /** 
     * Build a Criteria object which selects all objects which primary keys
     * are contained in the passed collection.
     *
     * @param pks the primary key values to build the criteria from, not null,
     *        may not contain null.
     */
    public static Criteria buildCriteria(Collection<ObjectKey<?>> pks)
    {
        return ${peerImplGetter}().buildCriteria(pks);
    }

    /** 
     * Build a Criteria object which selects all passed objects using their
     * primary key. Objects which do not yet have a primary key are ignored.
     *
     * @param objects the objects to build the criteria from, not null,
     *        may not contain null.
     */
    public static Criteria buildPkCriteria(
            Collection<${dbObjectClassName}> objects)
    {
        return ${peerImplGetter}().buildPkCriteria(objects);
    }

#end
    /** 
     * Build a Criteria object from the data object for this peer.
#if (!$idMethod.equals("none") && $primaryKeyColumnElements.size() > 1)
     * The primary key columns are only added if the object is not new.
#end
     *
     * @param obj the object to build the criteria from, not null.
     */
    public static Criteria buildCriteria(${dbObjectClassName} obj)
    {
        return ${peerImplGetter}().buildCriteria(obj);
    }
