<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->

<document>
  <properties>
    <title>Test project</title>
  </properties>

  <body>
    <section name="The Torque test project">
      <p>
        The test project tests all aspects of the Torque main distribution
        and checks whether the different parts of Torque (runtime, generator, 
        templates, maven-plugin) work together. The test project is almost
        a normal Torque project, with the following differences:
        <ul>
          <li>
            Instead of directly using the schema files from the 
            <i>src/main/schema</i> directory, the schema files are copied
            to the directory <i>target/torque/test/schema</i>,
            and some tokens are replaced during copying. 
            For the tests, the schema files from 
            <i>target/torque/test/schema</i> with the replaced tokens are used.
          </li>
          <li>
            The test project checks whether the book table exists
            in the database by executing the command 
            <source>select count(*) from book</source>.
            If it fails, it is assumed that we work on an empty database
            and no drop commands are generated. If it succeeds, we assume that
            all tables have been dropped and generate all drop commands.
            Should the database be in an inconsitent state, you can add
            -DonSqlError=continue to execute all sql statements nonetheless.
          </li>
        </ul>
      </p>
    </section>
    <section name="Running the test project">
      <p>
        In order to run the test project using maven, use the following 
        procedure:
       </p>
       <ul>
          <li>
            Check out the trunk containing the Torque modules 
            from the svn repository.
          </li>
          <li>
            Run the command <source>mvn install</source>
            in the directory you just checked out.
          </li>
          <li>
            Change into the directory <i>torque-test</i>, 
            and change one of the profiles in the file <i>pom.xml</i>
            to match the database which you want to test against. 
          </li>
          <li>
            Also change the file <i>Torque.properties</i> in the directory
            <i>torque-test/src/test/profile/${profile}</i>
            (where ${profile} is the name of the profile you have chosen)
            to match the database settings.
            Currently provided profiles for databases are:
            <ul><li>derby</li><li>derbyEmbedded</li><li>hsqldb</li><li>mssql</li><li>mysql</li><li>oracle</li><li>postgresql</li>
            </ul>
          </li>
          <li>
            In the directory <i>torque-test</i>, 
            run the command <source>mvn -P${profile} clean test</source>
            to run the test, replacing the variable 
            <code>${profile}</code> with the <strong>name of your chosen database
            profile</strong>.<br/>
            For example, if you want to test against mysql, run
            <source>mvn -Pmysql,managers,beans clean test</source>.
            N.B. You have  always to include profiles managers,beans.
          </li>
          <li>
            If you do not want or have a database installed locally, you may use the <strong>docker-testcontainer</strong> profile. 
            Run the command <source>mvn -P${profile},docker-testcontainer,managers,beans clean test</source>
            to run some tests*, replacing the variable 
            <code>${profile}</code> with the name of your chosen database
            profile. Currently only mysql and postgresql type is supported.<br/>
            For example, if you want to test against mysql, run
            <source>mvn -Pmysql,docker-testcontainer,managers,beans clean test</source>.
            * JUnit 5 not yet supports test suites, only some selected tests are triggered 
            (see package org.apache.torque.testcontainer).
            Hint (e.g. if adding new database profile): To test local Dockerfile run it locally to shortcut / 
            exclude other failures e.g. in docker-test/target directory with 
            <source>docker build -t build -f Dockerfile  ./ </source> and inspecting the image with on the fly container:
            <source>docker run --rm -it build bash</source>.
          </li>
      </ul>
      <p>
        The standard database profiles do not generate managers and beans,
        nor do they execute the corresponding tests. For generating beans,
        activate the beans profile. This will generate the bean classes 
        and run the corresponding test. For using manager classes, activate
        the managers profile. This will generate the manager classes 
        and run the corresponding test.<br/>
        For example, if you want to run the test against mysql and use beans
        and managers, run
        <source>mvn -Pmysql,beans,managers clean test</source>.
      </p>
    </section>
    <section name="Running mvn eclipse:eclipse on the test project">
      <p>
        Because dependency information is pulled from the profiles,
        you need to enable a profile from the profiles.xml for
        generating the eclipse files. Running <source>mvn eclipse:eclipse</source>
        without a profile will result in the following error:
        <br/>
        <source>org.apache.maven.reactor.MavenExecutionException: 
        Failed to validate POM for project org.apache.torque:torque-test</source>
      </p>
      <p>
        The profile you choose will also pull the database driver from the
        profile into your eclipse project. E.G. if you want to use the
        mysql driver dependency in your eclipse project, run
        <source>mvn -Pmysql eclipse:eclipse</source>
      </p>
    </section>
  </body>
</document>
    
