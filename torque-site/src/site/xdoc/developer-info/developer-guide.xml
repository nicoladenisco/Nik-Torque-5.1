<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->

<document>

  <properties>
    <title>Developer's Guide</title>
    <author email="jvanzyl@apache.org">Jason van Zyl</author>
    <author email="jmcnally@collab.net">John McNally</author>
    <author email="mpoeschl@marmot.at">Martin Poeschl</author>
    <author email="seade@backstagetech.com.au">Scott Eade</author>
  </properties>

  <body>


    <section name="Building from SVN">
      <p>
        The Torque build process uses 
        <a href="http://maven.apache.org">Maven 3</a> for building.
        <br/>
        You need to check out the <code>trunk</code> 
        part of the <code>db/torque</code> SVN repository.
        Please read the <a href="subversion.html">Torque Subversion</a> page
        for more information.
      </p>
      
      <subsection name="Command line build">
        <p>
          Change into the directory into which you checked out the
          torque 4 trunk. Run <source>mvn install</source>.
          The runtime, generator, templates, maven 3 generator plugin
          and ant tasks will be built in turn and installed
          in your local maven repository.
        </p>
      </subsection>
      
      <subsection name="Eclipse integration">
        <p>
          Assuming you want to check out the project from eclipse:
        </p>
        <ul>
          <li>
            Install the svn eclipse plugin of your choice
            (if you have not already done so)
            (the following description applies for subclipse)
          </li>
          <li>
            Create the repository location https://svn.apache.org/repos/asf
          </li>
          <li>
            Browse into the directory db/torque/torque4/trunk
          </li>
          <li>
            Right-click and "checkout...", 
            choose "checkout as a project in the workspace" 
            and name the project "torque4".
          </li>
          <li>
            Right-click "delete" on the torque4 project
            in the package explorer view but then do not check
            "delete project on disk".
            This step is needed because eclipse does not import projects
            inside an existing project.
          </li>
        </ul>
        From here on, the steps are the same whether you checked out
         from command line or from eclipse. If you check out from command line, 
        the whole torque4 folder should be checked out in the future workspace.
        <ul>
          <li>
            In command line, change into the torque4 directory 
            you just checked out and run 
            <source>mvn -Ptest,derbyEmbedded eclipse:configure-workspace install eclipse:clean eclipse:eclipse</source>.
          </li>
          <li>
            In command line, delete the .project file in this directory 
            but not in the subdirectories 
            (otherwise the following import will not work).
          </li>
          <li>
            In eclipse again, click File -> Import... -> General -> 
            Existing projects into workspace -> next 
            and choose the torque4 folder as root directory.
            Then you should see the projects "torque-ant-tasks", 
            "torque-generator", "torque-maven-plugin", "torque-runtime",
            "torque-templates".
          </li>
          <li>
            Click file -> New -> Project... -> General -> Project, 
            enter "torque-site" as project name, 
            deselect the checkbox "use default project location" 
            and choose the torque4/torque-site folder as project location.
          </li>
          <li>
            In eclipse, Click file -> New -> Project... -> General -> Project, 
            enter "torque4" as project name and click "Finish".
            By now, you should see the projects "torque-ant-tasks", 
            "torque-generator", "torque-maven-plugin", "torque-runtime", 
            "torque-site", "torque-templates", "torque-test" and "torque4"
            in your eclipse workspace, with the torque4 project
            containing all the other projects.
            That's it.
          </li>
        </ul>
       To later change or update a project change into the module directory and run 
       <source>mvn eclipse:eclipse</source>.
       or in case of the "special" test module torque-test run 
       <source>mvn -Phsqldb eclipse:configure-workspace eclipse:clean eclipse:eclipse</source>.
      </subsection>
    </section>

    <section name="Testing">
      <p>
        Torque is tested by running the test project.  Please refer to the
        <a href="test-project.html">Test Project docs</a> for information.
      </p>
    </section>

    <section name="Building a release / release candidate">
      <p>
        You need <a href="http://www.gnupg.org/">gpg</a> installed for building
        a release.
        Possibly, you need to change some gpg defaults. This can be done in
        the profiles section of the maven configuration file settings.xml.
        E. g.
      </p>
<source><![CDATA[
  <profiles>
    <profile>
      <id>gnupg</id>
      <properties>
        <gpg.publicKeyring>${location of public keyring}</gpg.publicKeyring>
        <gpg.secretKeyring>${location of secret keyring}</gpg.secretKeyring>
        <gpg.keyname>${id of gpg key used for signing}</gpg.keyname>
        <gpg.passphrase>${your key passphrase. Not a recommended setting to store passphrase as clear text.}</gpg.passphrase>
        <gpg.useagent>${true or false}</gpg.useagent>
      </properties>
    </profile>
  </profiles>

  <activeProfiles>
    <activeProfile>gnupg</activeProfile>
  </activeProfiles>
      ]]></source>
      <p>
        You also need to define the servers to deploy to in your settings.xml
        E.g.
      </p>
<source><![CDATA[
  <servers>
    <server>
      <id>apache.website</id>
      <username>tfischer</username>
      <filePermissions>664</filePermissions>
      <directoryPermissions>775</directoryPermissions>
    </server>
    <server>
      <id>apache.releases.https</id>
      <username>tfischer</username>
      <password>${encrypted apache password}</password>
    </server>
  </servers>]]></source>
      <p>
        Before building a release, check that the project builds with tests
        and check the test project against the various databases.
        Make sure that the site is ready for the new release (check the
        bottom of the  <a href="site-edit-deploy.html">site guide</a> for what 
        to do).
      </p>
      <p>
        To start building a release, run 
        <source>mvn -DautoVersionSubmodules -Ptest release:prepare</source>.
        This will change the version in the poms to the release version
        and then run a clean verify cycle on the new poms. This will fail
        because the test project needs the maven plugin which is not installed
        in the new version yet. To fix this, you might have to run
        <source>rm torque-test/derby.log</source>, then run
        <source>mvn install</source> 
        to install the torque artifacts in the release version.
        Then run again
        <source>mvn -Ptest release:prepare
        -Dusername=YourApacheUsername -Dpassword=YourApachePassword</source>
        to finish building the release, creating a tag for the release and 
        changing the pom's version entry to the new development version.
      </p>
      <p>
        To build the release and install it in the nexus staging repository,
        run <source>mvn release:perform</source>.
      </p>
      <p>
        To test the release, login into https://repository.apache.org and 
        download the source distribution from the staging repository. 
        Remove the already installed release artifacts 
        from your local maven repository, and check the source release builds.
        Then change into the test project of the source release,
        adjust the database properties in the profiles and run the test project
        against the various databases.
      </p>
      <p>
        Adjust the version numbers in the site.
      </p>
      <p>
        Call a vote on the torque dev list and forward to the db private and db pmc list (pmc@db.apache.org), 
        as formally the entire db pmc is responsible.
        When the vote is finished, post the result to the dev list and again
        forward to the db private/pmc list.
      </p>
      <p>
        When the vote is accepted, promote the staging repository in nexus and
        copy the distribution files to the directory
        /www/www.apache.org/dist/db/torque on people.apache.org.
        Deploy the site. 
        When the various rsyncs are through, announce the release on the 
        torque user list.
      </p>
    </section>

  </body>
</document>
