<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->

<document>
  <properties>
    <title>Torque Tutorial - Step 4: Configuring the Torque Runtime</title>
    <author email="pete-apache-dev@kazmier.com">Pete Kazmier</author>
    <author email="seade@backstagetech.com.au">Scott Eade</author>
    <author email="fischer@seitenbau.de">Thomas Fischer</author>
  </properties>
  <body>

<section name="Step 4: Configuring the Torque Runtime">

<p>
  Before we can start to write a Torque application, we have to
  configure the runtime environment of Torque.
  The Torque runtime needs a configuration file
  in order to retrieve the data which is necessary
  to connect to the database.
</p>

<subsection name="Torque Runtime Properties">

<p>
  The second step in the configuration of the
  Torque Runtime are the
  Torque runtime properties.  As the name suggests,
  these properties are used when your application is
  executing the object model code generated by Torque.
  The runtime properties control database
  parameters such as drivers, usernames, and
  passwords.
</p>

<p>
  We will save our runtime properties in the
  a file called <em>torque.properties</em>.
  Create a subdirectory src/main/resources in the
  top-level directory of your project, and create
  a new file called <em>torque.properties</em>
  in it. Add the following lines to this file:
</p>

<source><![CDATA[
torque.database.default = bookstore
torque.database.bookstore.adapter = mysql

torque.dsfactory.bookstore.factory = org.apache.torque.dsfactory.SharedPool2DataSourceFactory
torque.dsfactory.bookstore.connection.driver = org.gjt.mm.mysql.Driver
torque.dsfactory.bookstore.connection.url = jdbc:mysql://localhost:3306/bookstore
torque.dsfactory.bookstore.connection.user = root
torque.dsfactory.bookstore.connection.password = password
  ]]></source>

  <p>
    Change the adapter, driver, url, user and password parameters
    to match the parameters for your database.
    In the following table, the parameters used in the sample
    configuration are described. For further information, see the
    <a href="../../orm-reference/initialisation-configuration.html#Configuration">Runtime Configuration Reference</a>.
  </p>

  <table>
    <tr> <th>Property</th> <th>Description</th> </tr>
    <tr>
      <td>torque.database.default</td>
      <td>
        Torque has the ability to use multiple
        databases.  This property specifies which
        database is to be used as the default.
      </td>
    </tr>
    <tr>
      <td>torque.database.XXX.adapter</td>
      <td>
        Torque has the ability to deal with multiple database systems.
        This property specifies the database adapter to use.
      </td>
    </tr>
    <tr>
      <td>torque.dsfactory.XXX.factory</td>
      <td>
        The factory class that will be used to provide database connections.
      </td>
    </tr>
    <tr>
      <td>torque.dsfactory.XXX.connection.driver</td>
      <td>
        The JDBC database driver to use when
        connecting to your database.
      </td>
    </tr>
    <tr>
      <td>torque.database.XXX.connection.url</td>
      <td>
        The URL that will be used to access your
        database.  Torque's generated object model
        will perform all database operations using
        this URL.  This value should reflect the
        database name specified in your database
        schema file (see the <em>database</em>
        element's <em>name</em> attribute).
      </td>
    </tr>
    <tr>
      <td>torque.database.XXX.connection.user</td>
      <td>
        The username that has sufficient privileges
        to access your database.  This user does not
        require privileges to create and drop
        tables, unlike the user that was
        specified in <em>project.properties</em>.
      </td>
    </tr>
    <tr>
      <td>torque.database.XXX.connection.password</td>
      <td>
        The password for the specified username.
      </td>
    </tr>
  </table>

  <p>
    It is worth re-iterating that these runtime
    properties are not used by Torque when generating
    your object model and creating your database.  They
    are used only by the application utilizing the
    Torque-generated object model classes at run-time.
  </p>

</subsection>

<subsection name="Logging configuration">

  <p>
  Torque uses in generated java sources 
    <a href="http://commons.apache.org/logging/">
    commons-logging</a> as a logging interface.
    To enable logging in your application, read the
    <a href="https://commons.apache.org/proper/commons-logging/guide.html">
    commons-logging user guide</a>.
    </p>
    
   <p>
    Internally Torque uses now
    <a href="https://logging.apache.org/log4j/log4j-2.0/index.html">
    Log4j2</a>.
    To enable logging in your application, read the
    <a href="https://logging.apache.org/log4j/2.x/manual/configuration.html">
    configuration guide</a> or <a href="https://logging.apache.org/log4j/log4j-2.0/manual/index.html">Manual</a>.
  </p>

  <p>
    This example uses log4j as logging system and it is configured very simply
    so that only warnings and errors are printed.
    In a serious application, you want to improve the logging configuration 
    (using <a href="https://logging.apache.org/log4j/log4j-2.0/log4j-1.2-api/index.html">Log4j-1.2 API Adapter</a>).
  </p>

</subsection>
</section>

<section name="Where to next">

  <p>
    Now you have finished configuring the Torque runtime.
    You are now ready to use the generated classes to access
    the database.
  </p>
  <p>
    Next we will look <a href="step5.html">Writing a Sample Application</a>.
  </p>

</section>

<section name="User Comments">
  <a href="https://cwiki.apache.org/DBTORQUE/TutorialUserCommentsStep4">User comments</a>
  for this step
</section>

</body>
</document>
